import{_ as r,r as i,o as u,c as d,a as n,b as a,w as t,d as s,e}from"./app.ff0cf306.js";const k={},m=n("h1",{id:"context",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#context","aria-hidden":"true"},"#"),s(" Context")],-1),h=s("The "),b=n("code",null,"Context",-1),v=s(" object ("),y={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Context",target:"_blank",rel:"noopener noreferrer"},g=s("grammY API Reference"),w=s(") is an important part of grammY."),f=e('<p>Whenever you register a listener on your bot object, this listener will receive a context object.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// `ctx` is the `Context` object.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use the context object to</p><ul><li><a href="#available-information">access information about the message</a></li><li><a href="#available-actions">perform actions in response to the message</a>.</li></ul><p>Note that context objects are commonly called <code>ctx</code>.</p><h2 id="available-information" tabindex="-1"><a class="header-anchor" href="#available-information" aria-hidden="true">#</a> Available Information</h2><p>When a user sends a message to your bot, you can access it via <code>ctx<wbr>.message</code>. As an example, to get the message text, you can do this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// `txt` will be a `string` when processing text messages.</span>\n  <span class="token comment">// It will be `undefined` if the received message does not have any message text,</span>\n  <span class="token comment">// e.g. photos, stickers, and other messages.</span>\n  <span class="token keyword">const</span> txt <span class="token operator">=</span> ctx<span class="token punctuation">.</span>message<span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8),x=s("Similarly, you can access other properties of the message object, e.g. "),_=n("code",null,[s("ctx"),n("wbr"),s(".message"),n("wbr"),s(".chat")],-1),C=s(" for information about the chat where the message was sent. Check out the "),j={href:"https://core.telegram.org/bots/api#message",target:"_blank",rel:"noopener noreferrer"},q=s("part about "),T=n("code",null,"Message",-1),M=s("s in the Telegram Bot API Reference"),I=s(" to see which data is available. Alternatively, you can simply use autocomplete in your code editor to see the possible options."),E=e(`<p>If you register your listener for other types, <code>ctx</code> will also give you information about those. Example:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edited_message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the new, edited, text of the message.</span>
  <span class="token keyword">const</span> editedText <span class="token operator">=</span> ctx<span class="token punctuation">.</span>editedMessage<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),B=s("Moreover, you can get access to the raw "),P=n("code",null,"Update",-1),F=s(" object ("),A={href:"https://core.telegram.org/bots/api#update",target:"_blank",rel:"noopener noreferrer"},D=s("Telegram Bot API Reference"),S=s(") that Telegram sends to your bot. This update object ("),O=n("code",null,[s("ctx"),n("wbr"),s(".update")],-1),R=s(") contains all the data that sources "),G=n("code",null,[s("ctx"),n("wbr"),s(".message")],-1),L=s(" and the like."),Y=e(`<p>The context object always contains information about your bot, accessible via <code>ctx<wbr>.me</code>.</p><h3 id="shortcuts" tabindex="-1"><a class="header-anchor" href="#shortcuts" aria-hidden="true">#</a> Shortcuts</h3><p>There are a number of shortcuts installed on the context object.</p><table><thead><tr><th>Shortcut</th><th>Description</th></tr></thead><tbody><tr><td><code>ctx<wbr>.msg</code></td><td>Gets the message object, also edited ones</td></tr><tr><td><code>ctx<wbr>.chat</code></td><td>Gets the chat object</td></tr><tr><td><code>ctx<wbr>.sender<wbr>Chat</code></td><td>Gets the sender chat object out of <code>ctx<wbr>.msg</code> (for anonymous channel/group messages)</td></tr><tr><td><code>ctx<wbr>.from</code></td><td>Gets the author of the message, callback query, or other things</td></tr><tr><td><code>ctx<wbr>.inline<wbr>Message<wbr>Id</code></td><td>Gets the inline message identifier for callback queries or chosen inline results</td></tr></tbody></table><p>In other words, you can also do this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the text of the message.</span>
  <span class="token keyword">const</span> text <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edited_message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the new, edited, text of the message.</span>
  <span class="token keyword">const</span> editedText <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hence, if you want to, you can forget about <code>ctx<wbr>.message</code> and <code>ctx<wbr>.channel<wbr>Post</code> and <code>ctx<wbr>.edited<wbr>Message</code> and so on and so forth, and just always use <code>ctx<wbr>.msg</code> instead.</p><h2 id="probing-via-has-checks" tabindex="-1"><a class="header-anchor" href="#probing-via-has-checks" aria-hidden="true">#</a> Probing via Has Checks</h2><p>The context object has a few methods that allow you to probe the contained data for certain things. For example, you can call <code>ctx<wbr>.has<wbr>Command(&quot;start&quot;)</code> to see if the context object contains a <code>/start</code> command. This is why the methods are collectively named <em>has checks</em>.</p>`,9),V={class:"custom-container tip"},W=n("p",{class:"custom-container-title"},"Know When to Use Has Checks",-1),H=s("This is the exact same logic that is used by "),N=n("code",null,[s("bot"),n("wbr"),s('.command("start")')],-1),U=s(". Note that you should usually use "),z=s("filter queries"),Q=s(" and similar methods. Using has checks works best inside the "),X=s("conversations plugin"),Z=s("."),J=e(`<p>The has checks correctly narrow down the context type. This means that checking if a context has callback query data will tell TypeScript that the context has the field <code>ctx<wbr>.callback<wbr>Query<wbr>.data</code> present.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">hasCallbackQuery</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">query-data-\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`ctx.callbackQuery.data\` is known to be present here</span>
  <span class="token keyword">const</span> data<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>callbackQuery<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),K=s("The same applies to all other has checks. Check out the "),$={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Context#has",target:"_blank",rel:"noopener noreferrer"},nn=s("API reference of the context object"),sn=s(" to see a list of all has checks. Also check out the static property "),an=n("code",null,[s("Context"),n("wbr"),s(".has")],-1),tn=s(" in the "),en={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Context#Static_Properties",target:"_blank",rel:"noopener noreferrer"},on=s("API reference"),cn=s(" that lets you create efficient predicate functions for probing a lot of context objects."),pn=e(`<h2 id="available-actions" tabindex="-1"><a class="header-anchor" href="#available-actions" aria-hidden="true">#</a> Available Actions</h2><p>If you want to respond to a message from a user, you could write this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the chat identifier.</span>
  <span class="token keyword">const</span> chatId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  <span class="token comment">// The text to reply with</span>
  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&quot;I got your message!&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// Send the reply.</span>
  <span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>chatId<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can notice two things that are not optimal about this:</p><ol><li>We must have access to the <code>bot</code> object. This means that we have to pass the <code>bot</code> object all around our code base in order to respond, which is annoying when you have more than one source file and you define your listener somewhere else.</li><li>We have to take out the chat identifier of the context, and explicitly pass it to <code>send<wbr>Message</code> again. This is annoying, too, because you most likely always want to respond to the same user that sent a message. Imagine how often you would type the same thing over and over again!</li></ol><p>Regarding point 1., the context object simply provides you access to the same API object that you find on <code>bot<wbr>.api</code>, it is called <code>ctx<wbr>.api</code>. You could now write <code>ctx<wbr>.api<wbr>.send<wbr>Message</code> instead and you no longer have to pass around your <code>bot</code> object. Easy.</p><p>However, the real strength is to fix point 2. The context object lets you simply send a reply like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;I got your message!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or, even shorter:</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Gotcha!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neat! \u{1F389}</p><p>Under the hood, the context <em>already knows its chat identifier</em> (namely <code>ctx<wbr>.msg<wbr>.chat<wbr>.id</code>), so it gives you the <code>reply</code> method to just send a message back to the same chat. Internally, <code>reply</code> again calls <code>send<wbr>Message</code> with the chat identifier pre-filled for you.</p>`,10),ln=s("Consequently, all methods on the context object take options objects of type "),rn=n("code",null,"Other",-1),un=s(" as explained "),dn=s("earlier"),kn=s(". This can be used to pass further configuration to every API call."),mn={class:"custom-container tip"},hn=n("p",{class:"custom-container-title"},"Telegram Reply Feature",-1),bn=s("Even though the method is called "),vn=n("code",null,[s("ctx"),n("wbr"),s(".reply")],-1),yn=s(" in grammY (and many other frameworks), it does not use the "),gn={href:"https://telegram.org/blog/replies-mentions-hashtags#replies",target:"_blank",rel:"noopener noreferrer"},wn=s("reply feature of Telegram"),fn=s(" where a previous message is linked."),xn=s("If you look up what "),_n=n("code",null,[s("send"),n("wbr"),s("Message")],-1),Cn=s(" can do in the "),jn={href:"https://core.telegram.org/bots/api#sendmessage",target:"_blank",rel:"noopener noreferrer"},qn=s("Telegram Bot API Reference"),Tn=e(", you will see a number of options, such as <code>parse<wbr>_mode</code>, <code>disable<wbr>_web<wbr>_page<wbr>_preview</code>, and <code>reply<wbr>_to<wbr>_message<wbr>_id</code>. The latter can be used to make a message a reply:",7),Mn=e(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;^ This is a message!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  reply_to_message_id<span class="token operator">:</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>message_id<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The same options object can be passed to <code>bot<wbr>.api<wbr>.send<wbr>Message</code> and <code>ctx<wbr>.api<wbr>.send<wbr>Message</code>. Use auto-complete to see the available options right in your code editor.</p>`,2),In=e("Naturally, every other method on <code>ctx<wbr>.api</code> has a shortcut with the correct pre-filled values, such as <code>ctx<wbr>.reply<wbr>With<wbr>Photo</code> to reply with a photo, or <code>ctx<wbr>.export<wbr>Chat<wbr>Invite<wbr>Link</code> to get an invite link for the respective chat. If you want to get an overview over what shortcuts exist, then auto-complete is your friend, along with the ",7),En={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Context",target:"_blank",rel:"noopener noreferrer"},Bn=s("grammY API Reference"),Pn=s("."),Fn=e('<p>Note that you may not want to react in the same chat always. In this case, you can just fall back to using <code>ctx<wbr>.api</code> methods, and specify all options when calling them. For example, if you receive a message from Alice and want to react by sending a message to Bob, then you cannot use <code>ctx<wbr>.reply</code> because it will always send messages to the chat with Alice. Instead, call <code>ctx<wbr>.api<wbr>.send<wbr>Message</code> and specify the chat identifier of Bob.</p><h2 id="how-context-objects-are-created" tabindex="-1"><a class="header-anchor" href="#how-context-objects-are-created" aria-hidden="true">#</a> How Context Objects Are Created</h2>',2),An=s("Whenever your bot receives a new message from Telegram, it is wrapped in an update object. In fact, update objects can not only contain new messages, but also all other sorts of things, such as edits to messages, poll answers, and "),Dn={href:"https://core.telegram.org/bots/api#update",target:"_blank",rel:"noopener noreferrer"},Sn=s("much more"),On=s("."),Rn=n("p",null,[s("A fresh context object is created exactly once for every incoming update. Contexts for different updates are completely unrelated objects, they only reference the same bot information via "),n("code",null,[s("ctx"),n("wbr"),s(".me")]),s(".")],-1),Gn=s("The same context object for one update will be shared by all installed middleware ("),Ln=s("docs"),Yn=s(") on the bot."),Vn=n("h2",{id:"customizing-the-context-object",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#customizing-the-context-object","aria-hidden":"true"},"#"),s(" Customizing the Context Object")],-1),Wn=n("blockquote",null,[n("p",null,"If you are new to context objects, you don\u2019t need to worry about the rest of this page.")],-1),Hn=n("p",null,"You can install your own properties on the context object if you want.",-1),Nn=n("h3",{id:"via-middleware-recommended",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#via-middleware-recommended","aria-hidden":"true"},"#"),s(" Via Middleware (Recommended)")],-1),Un=s("The customizations can be easily done in "),zn=s("middleware"),Qn=s("."),Xn={class:"custom-container tip"},Zn=n("p",{class:"custom-container-title"},"Middlewhat?",-1),Jn=s("This section requires an understanding of middleware, so in case you have not skipped ahead to "),Kn=s("this section"),$n=s(" yet, here is a very brief summary."),ns=n("p",null,[s("All you really need to know is that several handlers can process the same context object. There are special handlers which can modify "),n("code",null,"ctx"),s(" before any other handlers are run, and the modifications of the first handler will be visible to all subsequent handlers.")],-1),ss=e(`<p>The idea is to install middleware before you register other listeners. You can then set the properties you want inside these handlers.</p><p>For illustration purposes, let\u2019s say you want to set a property called <code>ctx<wbr>.config</code> on the context object. In this example, we will use it to store some configuration about the project so that all handlers have access to it. The configuration will make it easier to detect if the bot is used by its developer or by regular users.</p><p>Right after creating your bot, do this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">BOT_DEVELOPER</span> <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span> <span class="token comment">// bot developer chat identifier</span>

bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Modify context object here by setting the config.</span>
  ctx<span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>
    botDeveloper<span class="token operator">:</span> <span class="token constant">BOT_DEVELOPER</span><span class="token punctuation">,</span>
    isDeveloper<span class="token operator">:</span> ctx<span class="token punctuation">.</span>from<span class="token operator">?.</span>id <span class="token operator">===</span> <span class="token constant">BOT_DEVELOPER</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// Run remaining handlers.</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, you can use <code>ctx<wbr>.config</code> in the remaining handlers.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Work with modified context here!</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>config<span class="token punctuation">.</span>isDeveloper<span class="token punctuation">)</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Hi mom!! &lt;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome, human!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, you will notice that TypeScript does not know that <code>ctx<wbr>.config</code> is available, even though we are assigning the property correctly. So while the code will work at runtime, it does not compile. To fix this, we need to adjust the type of the context and add the property.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BotConfig</span> <span class="token punctuation">{</span>
  botDeveloper<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  isDeveloper<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> Context <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  config<span class="token operator">:</span> BotConfig<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The new type <code>My<wbr>Context</code> now accurately describes the context objects our bot is actually handling.</p><blockquote><p>You will need to make sure that you keep the types in sync with the properties you initialize.</p></blockquote><p>We can use the new type by passing it to the <code>Bot</code> constructor.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot<span class="token operator">&lt;</span>MyContext<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In summary, the setup will look like this:</p>`,13),as=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"BOT_DEVELOPER"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"123456"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// bot developer chat identifier"),s(`

`),n("span",{class:"token comment"},"// Define custom context type."),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"BotConfig"),s(),n("span",{class:"token punctuation"},"{"),s(`
  botDeveloper`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
  isDeveloper`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"boolean"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token operator"},"="),s(" Context "),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"{"),s(`
  config`),n("span",{class:"token operator"},":"),s(" BotConfig"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("Bot"),n("span",{class:"token operator"},"<"),s("MyContext"),n("span",{class:"token operator"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Set custom properties on context objects."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},","),s(" next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  ctx`),n("span",{class:"token punctuation"},"."),s("config "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    botDeveloper`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"BOT_DEVELOPER"),n("span",{class:"token punctuation"},","),s(`
    isDeveloper`),n("span",{class:"token operator"},":"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("from"),n("span",{class:"token operator"},"?."),s("id "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"BOT_DEVELOPER"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define handlers for custom context objects."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},"."),s("config"),n("span",{class:"token punctuation"},"."),s("isDeveloper"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hi mom!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Welcome"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ts=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"BOT_DEVELOPER"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"123456"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// bot developer chat identifier"),s(`

`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Set custom properties on context objects."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("ctx"),n("span",{class:"token punctuation"},","),s(" next")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  ctx`),n("span",{class:"token punctuation"},"."),s("config "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"botDeveloper"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"BOT_DEVELOPER"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"isDeveloper"),n("span",{class:"token operator"},":"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("from"),n("span",{class:"token operator"},"?."),s("id "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"BOT_DEVELOPER"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define handlers for custom context objects."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},"."),s("config"),n("span",{class:"token punctuation"},"."),s("isDeveloper"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hi mom!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Welcome"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),es=s("Naturally, the custom context type can also be passed to other things which handle middleware, such as "),os={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Composer",target:"_blank",rel:"noopener noreferrer"},cs=s("composers"),ps=s("."),is=e(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> composer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composer<span class="token operator">&lt;</span>MyContext<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),ls=s("Some plugins will also require you to pass a custom context type, such as the "),rs=s("router"),us=s(" or the "),ds=s("menu"),ks=s(" plugin. Check out their docs to see how they can use a custom context type. These types are called context flavors, as described "),ms=n("a",{href:"#context-flavors"},"down here",-1),hs=s("."),bs=e(`<h3 id="via-inheritance" tabindex="-1"><a class="header-anchor" href="#via-inheritance" aria-hidden="true">#</a> Via Inheritance</h3><p>In addition to setting custom properties on the context object, you can subclass the <code>Context</code> class.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyContext</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
  <span class="token comment">// etc</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, we recommend that you customize the context object <a href="#via-middleware-recommended">via middleware</a> because it is much more flexible and works much better if you want to install plugins.</p><p>We will now see how to use custom classes for context objects.</p><p>When constructing your bot, you can pass a custom context constructor that will be used to instantiate the context objects. Note that your class must extend <code>Context</code>.</p>`,6),vs=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" Context "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token punctuation"},"{"),s(" Update"),n("span",{class:"token punctuation"},","),s(" UserFromGetMe "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"@grammyjs/types"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define a custom context class."),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Context"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Set some custom properties."),s(`
  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"readonly"),s(" customProp"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),s("update"),n("span",{class:"token operator"},":"),s(" Update"),n("span",{class:"token punctuation"},","),s(" api"),n("span",{class:"token operator"},":"),s(" Api"),n("span",{class:"token punctuation"},","),s(" me"),n("span",{class:"token operator"},":"),s(" UserFromGetMe"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("update"),n("span",{class:"token punctuation"},","),s(" api"),n("span",{class:"token punctuation"},","),s(" me"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("customProp "),n("span",{class:"token operator"},"="),s(" me"),n("span",{class:"token punctuation"},"."),s("username"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"42"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Pass the constructor of the custom context class as an option."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"<token>"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  ContextConstructor`),n("span",{class:"token operator"},":"),s(" MyContext"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// `ctx` is now of type `MyContext`."),s(`
  `),n("span",{class:"token keyword"},"const"),s(" prop "),n("span",{class:"token operator"},"="),s(" ctx"),n("span",{class:"token punctuation"},"."),s("customProp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ys=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" Context "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define a custom context class."),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Context"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Set some custom properties."),s(`
  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"readonly"),s(" customProp"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),s("update"),n("span",{class:"token punctuation"},","),s(" api"),n("span",{class:"token punctuation"},","),s(" me"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("update"),n("span",{class:"token punctuation"},","),s(" api"),n("span",{class:"token punctuation"},","),s(" me"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("customProp "),n("span",{class:"token operator"},"="),s(" me"),n("span",{class:"token punctuation"},"."),s("username"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"42"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Pass the constructor of the custom context class as an option."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"<token>"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  ContextConstructor`),n("span",{class:"token operator"},":"),s(" MyContext"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// `ctx` is now of type `MyContext`."),s(`
  `),n("span",{class:"token keyword"},"const"),s(" prop "),n("span",{class:"token operator"},"="),s(" ctx"),n("span",{class:"token punctuation"},"."),s("customProp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gs=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" Context "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy@v1.11.1/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token punctuation"},"{"),s(" Update"),n("span",{class:"token punctuation"},","),s(" UserFromGetMe "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://esm.sh/@grammyjs/types"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define a custom context class."),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Context"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Set some custom properties."),s(`
  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"readonly"),s(" customProp"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),s("update"),n("span",{class:"token operator"},":"),s(" Update"),n("span",{class:"token punctuation"},","),s(" api"),n("span",{class:"token operator"},":"),s(" Api"),n("span",{class:"token punctuation"},","),s(" me"),n("span",{class:"token operator"},":"),s(" UserFromGetMe"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("update"),n("span",{class:"token punctuation"},","),s(" api"),n("span",{class:"token punctuation"},","),s(" me"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("customProp "),n("span",{class:"token operator"},"="),s(" me"),n("span",{class:"token punctuation"},"."),s("username"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"42"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Pass the constructor of the custom context class as an option."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"<token>"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  ContextConstructor`),n("span",{class:"token operator"},":"),s(" MyContext"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// `ctx` is now of type `MyContext`."),s(`
  `),n("span",{class:"token keyword"},"const"),s(" prop "),n("span",{class:"token operator"},"="),s(" ctx"),n("span",{class:"token punctuation"},"."),s("customProp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ws=e('<p>Notice how the custom context type will be inferred automatically when you are using a subclass. You no longer need to write <code>Bot&lt;My<wbr>Context&gt;</code> because you already specified your subclass constructor in the options object of <code>new Bot()</code>.</p><p>However, this makes it very hard (if not impossible) to install plugins, as they often need you to install context flavors.</p><h2 id="context-flavors" tabindex="-1"><a class="header-anchor" href="#context-flavors" aria-hidden="true">#</a> Context Flavors</h2><p>Context flavors are a way to tell TypeScript about new properties on your context object. These new properties can be shipped in plugins or other modules and then installed on your bot.</p><p>Context flavors are also able to transform the types of existing properties using automatic procedures which are defined by plugins.</p><h3 id="additive-context-flavors" tabindex="-1"><a class="header-anchor" href="#additive-context-flavors" aria-hidden="true">#</a> Additive Context Flavors</h3><p>As implied above, there are two different kinds of context flavors. The basic one is called <em>additive context flavor</em>, and whenever we talk about context flavoring, we just mean this basic form. Let\u2019s look at how it works.</p>',7),fs=s("As an example, when you have "),xs=s("session data"),_s=s(", you must register "),Cs=n("code",null,[s("ctx"),n("wbr"),s(".session")],-1),js=s(" on the context type. Otherwise,"),qs=e(`<ol><li>you cannot install the built-in sessions plugin, and</li><li>you don\u2019t have access to <code>ctx<wbr>.session</code> in your listeners.</li></ol><blockquote><p>Even though we\u2019ll use sessions as an example here, similar things apply for lots of other things. In fact, most plugins will give you a context flavor that you need to use.</p></blockquote><p>A context flavor is simply a small new type that defines the properties that should be added to the context type. Let\u2019s look at an example for a flavor.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SessionFlavor<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  session<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Ts=s("The "),Ms=n("code",null,[s("Session"),n("wbr"),s("Flavor")],-1),Is=s(" type ("),Es={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/SessionFlavor",target:"_blank",rel:"noopener noreferrer"},Bs=s("API Reference"),Ps=s(") is straightforward: it defines only the property "),Fs=n("code",null,"session",-1),As=s(". It takes a type parameter that will define the actual structure of the session data."),Ds=e(`<p>How is that useful? This is how you can flavor your context with session data:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Context<span class="token punctuation">,</span> SessionFlavor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Declare \`ctx.session\` to be of type \`string\`.</span>
<span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> Context <span class="token operator">&amp;</span> SessionFlavor<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now use the session plugin, and you have access to <code>ctx<wbr>.session</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Now \`str\` is of type \`string\`.</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transformative-context-flavors" tabindex="-1"><a class="header-anchor" href="#transformative-context-flavors" aria-hidden="true">#</a> Transformative Context Flavors</h3><p>The other kind of context flavor is more powerful. Instead of being installed with the <code>&amp;</code> operator, they need to be installed like so:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SomeFlavorA <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;my-plugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> SomeFlavorA<span class="token operator">&lt;</span>Context<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Everything else works the same way.</p><p>Every (official) plugin states in its documentation whether it must be used via additive or via transformative context flavor.</p><h3 id="combining-different-context-flavors" tabindex="-1"><a class="header-anchor" href="#combining-different-context-flavors" aria-hidden="true">#</a> Combining Different Context Flavors</h3><p>If you have different <a href="#additive-context-flavors">additive context flavors</a>, you can just install them like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> Context <span class="token operator">&amp;</span> FlavorA <span class="token operator">&amp;</span> FlavorB <span class="token operator">&amp;</span> FlavorC<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The order of context flavors does not matter, you can combine them in any order you like.</p><p>Multiple <a href="#transformative-context-flavors">transformative context flavors</a> can also be combined:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> FlavorX<span class="token operator">&lt;</span>FlavorY<span class="token operator">&lt;</span>FlavorZ<span class="token operator">&lt;</span>Context<span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here, the order could matter, as <code>FlavorZ</code> transforms <code>Context</code> first, then <code>FlavorY</code>, and the result of this will be transformed again by <code>FlavorX</code>. (In practice, this is nothing to worry about because plugins usually don\u2019t clash with each other.)</p><p>You can even mix additive and transformative flavors:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> FlavorX<span class="token operator">&lt;</span>
  FlavorY<span class="token operator">&lt;</span>
    FlavorZ<span class="token operator">&lt;</span>
      Context <span class="token operator">&amp;</span> FlavorA <span class="token operator">&amp;</span> FlavorB <span class="token operator">&amp;</span> FlavorC
    <span class="token operator">&gt;</span>
  <span class="token operator">&gt;</span>
<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function Ss(Os,Rs){const o=i("ExternalLinkIcon"),c=i("RouterLink"),p=i("CodeGroupItem"),l=i("CodeGroup");return u(),d("div",null,[m,n("p",null,[h,b,v,n("a",y,[g,a(o)]),w]),f,n("p",null,[x,_,C,n("a",j,[q,T,M,a(o)]),I]),E,n("p",null,[B,P,F,n("a",A,[D,a(o)]),S,O,R,G,L]),Y,n("div",V,[W,n("p",null,[H,N,U,a(c,{to:"/guide/filter-queries.html"},{default:t(()=>[z]),_:1}),Q,a(c,{to:"/plugins/conversations.html"},{default:t(()=>[X]),_:1}),Z])]),J,n("p",null,[K,n("a",$,[nn,a(o)]),sn,an,tn,n("a",en,[on,a(o)]),cn]),pn,n("p",null,[ln,rn,un,a(c,{to:"/guide/basics.html#sending-messages"},{default:t(()=>[dn]),_:1}),kn]),n("div",mn,[hn,n("p",null,[bn,vn,yn,n("a",gn,[wn,a(o)]),fn]),n("p",null,[xn,_n,Cn,n("a",jn,[qn,a(o)]),Tn]),Mn]),n("p",null,[In,n("a",En,[Bn,a(o)]),Pn]),Fn,n("p",null,[An,n("a",Dn,[Sn,a(o)]),On]),Rn,n("p",null,[Gn,a(c,{to:"/guide/middleware.html"},{default:t(()=>[Ln]),_:1}),Yn]),Vn,Wn,Hn,Nn,n("p",null,[Un,a(c,{to:"/guide/middleware.html"},{default:t(()=>[zn]),_:1}),Qn]),n("div",Xn,[Zn,n("p",null,[Jn,a(c,{to:"/guide/middleware.html"},{default:t(()=>[Kn]),_:1}),$n]),ns]),ss,a(l,null,{default:t(()=>[a(p,{title:"TypeScript",active:""},{default:t(()=>[as]),_:1}),a(p,{title:"JavaScript"},{default:t(()=>[ts]),_:1})]),_:1}),n("p",null,[es,n("a",os,[cs,a(o)]),ps]),is,n("p",null,[ls,a(c,{to:"/plugins/router.html"},{default:t(()=>[rs]),_:1}),us,a(c,{to:"/plugins/menu.html"},{default:t(()=>[ds]),_:1}),ks,ms,hs]),bs,a(l,null,{default:t(()=>[a(p,{title:"TypeScript",active:""},{default:t(()=>[vs]),_:1}),a(p,{title:"JavaScript",active:""},{default:t(()=>[ys]),_:1}),a(p,{title:"Deno"},{default:t(()=>[gs]),_:1})]),_:1}),ws,n("p",null,[fs,a(c,{to:"/plugins/session.html"},{default:t(()=>[xs]),_:1}),_s,Cs,js]),qs,n("p",null,[Ts,Ms,Is,n("a",Es,[Bs,a(o)]),Ps,Fs,As]),Ds])}const Ls=r(k,[["render",Ss],["__file","context.html.vue"]]);export{Ls as default};
