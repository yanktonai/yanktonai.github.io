import{_ as i}from"./filter-query-search.b06c500c.js";import{_ as l,r as c,o as u,c as d,a as s,b as a,w as p,e,d as n}from"./app.81c9d145.js";const r={},m=e('<h1 id="consultas-de-filtro-y-bot-on" tabindex="-1"><a class="header-anchor" href="#consultas-de-filtro-y-bot-on" aria-hidden="true">#</a> Consultas de filtro y <code>bot<wbr>.on()</code></h1><p>El primer argumento de <code>bot<wbr>.on()</code> es una cadena llamada <em>filter query</em>.</p><h2 id="introduccion" tabindex="-1"><a class="header-anchor" href="#introduccion" aria-hidden="true">#</a> Introducci\xF3n</h2><p>La mayor\xEDa (\xBFtodos?) de los otros frameworks de bots permiten realizar una forma primitiva de filtrado para las actualizaciones, por ejemplo, s\xF3lo <code>on(&quot;message&quot;)</code> y similares. El resto del filtrado de los mensajes se deja al desarrollador, lo que a menudo conduce a interminables declaraciones <code>if</code> en su c\xF3digo.</p><p>Por el contrario, <strong>grammY incluye su propio lenguaje de consulta</strong> que puedes utilizar para <strong>filtrar exactamente los mensajes</strong> que quieras.</p><p>Esto permite utilizar m\xE1s de 500 filtros diferentes, y es posible que a\xF1adamos m\xE1s con el tiempo. Todos los filtros v\xE1lidos se pueden autocompletar en el editor de c\xF3digo. Por lo tanto, puedes simplemente escribir <code>bot<wbr>.on(&quot;&quot;)</code>, abrir el autocompletado, y buscar entre todas las consultas escribiendo algo</p><p><img src="'+i+`" alt="Filtro de b\xFAsqueda de consultas"></p><p>La inferencia de tipos de <code>bot<wbr>.on()</code> comprender\xE1 la consulta de filtro que hayas elegido. Por lo tanto, ajusta algunos tipos en el contexto que se sabe que existen.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Podr\xEDa ser undefined si el mensaje recibido no tiene texto.</span>
  <span class="token keyword">const</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:text&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// El texto siempre est\xE1 definido porque este manejador es llamado cuando se recibe un mensaje de texto.</span>
  <span class="token keyword">const</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En cierto sentido, grammY implementa las consultas de filtro tanto en tiempo de ejecuci\xF3n, como en el nivel de tipo.</p><h2 id="ejemplos-de-consulta" tabindex="-1"><a class="header-anchor" href="#ejemplos-de-consulta" aria-hidden="true">#</a> Ejemplos de consulta</h2><p>Aqu\xED hay algunos ejemplos de consultas:</p><h3 id="consultas-regulares" tabindex="-1"><a class="header-anchor" href="#consultas-regulares" aria-hidden="true">#</a> Consultas regulares</h3><p>Filtros simples para actualizaciones, y sub-filtros:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mensaje&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// se llama cuando se recibe cualquier mensaje</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mensaje:texto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s\xF3lo mensajes de texto</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:photo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s\xF3lo mensajes de foto</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filtro-para-entidades" tabindex="-1"><a class="header-anchor" href="#filtro-para-entidades" aria-hidden="true">#</a> Filtro para entidades</h3><p>Subfiltros que van un nivel m\xE1s all\xE1:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:entities:url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes que contienen una URL</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:entities:code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes que contienen un fragmento de c\xF3digo</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edited_message:entities&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes editados con cualquier tipo de entidades</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omitir-valores" tabindex="-1"><a class="header-anchor" href="#omitir-valores" aria-hidden="true">#</a> Omitir valores</h3><p>Puedes omitir algunos valores en las consultas del filtro. Entonces grammY buscar\xE1 entre diferentes valores para que coincidan con tu consulta.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cualquier mensaje de texto y cualquier mensaje de texto de los canales</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes con URL en el texto o en el pie de foto (fotos, etc)</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes o publicaciones de canales con email en texto o pie de foto</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),k=n("Si se omite el valor "),b=s("em",null,"first",-1),h=n(", se pueden obtener tanto los mensajes como los mensajes del canal. "),v=n("Recuerde"),g=n(" que "),f=s("code",null,[n("ctx"),s("wbr"),n(".msg")],-1),q=n(" le da acceso tanto a los mensajes como a las publicaciones del canal, lo que coincida con la consulta."),_=e(`<p>Si se omite el valor <em>segundo</em>, se obtiene acceso tanto a las entidades como a los subt\xEDtulos. Puede omitir tanto la primera como la segunda parte al mismo tiempo.</p><h3 id="accesos-directos" tabindex="-1"><a class="header-anchor" href="#accesos-directos" aria-hidden="true">#</a> Accesos directos</h3><p>El motor de consulta de grammY permite definir accesos directos que agrupan consultas relacionadas.</p><h4 id="msg" tabindex="-1"><a class="header-anchor" href="#msg" aria-hidden="true">#</a> <code>msg</code></h4><p>El atajo <code>msg</code> agrupa los nuevos mensajes y los nuevos mensajes del canal. En otras palabras, usar <code>msg</code> es equivalente a escuchar los eventos <code>&quot;message&quot;</code> y <code>&quot;channel<wbr>_post&quot;</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cualquier mensaje o mensaje de canal</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;msg:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exactamente lo mismo que \`:text\`.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="edit" tabindex="-1"><a class="header-anchor" href="#edit" aria-hidden="true">#</a> <code>edit</code></h4><p>Este atajo de teclado <code>edit</code> agrupa los mensajes editados y los mensajes editados del canal.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cualquier edici\xF3n de mensajes o publicaciones del canal</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ediciones de mensajes de texto</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit::url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ediciones de mensajes o entradas de canal con URL</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit:location&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// actualizaci\xF3n de la ubicaci\xF3n en vivo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="media" tabindex="-1"><a class="header-anchor" href="#media" aria-hidden="true">#</a> <code>:<wbr>media</code></h4><p>El atajo <code>:<wbr>media</code> agrupa los mensajes de foto y v\xEDdeo.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:media&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes de foto y video</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edited_channel_post:media&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes editados del canal con medios</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:media&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mensajes multimedia o publicaciones del canal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="archivo" tabindex="-1"><a class="header-anchor" href="#archivo" aria-hidden="true">#</a> <code>:<wbr>archivo</code></h4><p>El atajo <code>:<wbr>file</code> agrupa todos los mensajes que contienen un archivo. Por lo tanto, puedes estar seguro de que <code>await ctx<wbr>.get<wbr>File()</code> te dar\xE1 un objeto archivo.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// archivos en mensajes o mensajes del canal</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit:file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ediciones de mensajes de archivos o mensajes de canales de archivos</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="consejos-utiles" tabindex="-1"><a class="header-anchor" href="#consejos-utiles" aria-hidden="true">#</a> Consejos \xFAtiles</h3><p>Puedes detectar bots en las consultas con la parte de consulta <code>:<wbr>is<wbr>_bot</code>. El az\xFAcar sint\xE1ctico <code>:<wbr>me</code> se puede utilizar para referirse a tu bot desde una consulta, que comparar\xE1 los identificadores de usuario por ti.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:new_chat_members:is_bot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// un bot se ha unido al chat</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:left_chat_member:me&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tu bot abandon\xF3 el chat (fue eliminado)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Filtrar por propiedades del usuario</p><p>Si quieres filtrar por otras propiedades de un usuario, necesitas realizar una petici\xF3n adicional, por ejemplo <code>await ctx<wbr>.get<wbr>Author()</code> para el autor del mensaje. Las consultas de filtrado no realizar\xE1n secretamente otras peticiones a la API por ti. Sigue siendo sencillo realizar este tipo de filtrado:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;creator&quot;</span> <span class="token operator">||</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;administrator&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Maneja mensajes de creadores y administradores.</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="combinacion-de-varias-consultas" tabindex="-1"><a class="header-anchor" href="#combinacion-de-varias-consultas" aria-hidden="true">#</a> Combinaci\xF3n de varias consultas</h2><p>Puede combinar cualquier n\xFAmero de consultas de filtro con las operaciones AND y OR.</p><h3 id="combinar-con-or" tabindex="-1"><a class="header-anchor" href="#combinar-con-or" aria-hidden="true">#</a> Combinar con OR</h3><p>Si quiere instalar alguna pieza de middleware detr\xE1s de la concatenaci\xF3n OR de dos consultas, puede pasar ambas a <code>bot<wbr>.on()</code> en un array.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Se ejecuta si la actualizaci\xF3n es sobre un mensaje O una edici\xF3n de un mensaje</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;edited_message&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Se ejecuta si se encuentra un hashtag O un correo electr\xF3nico O una entidad de menci\xF3n en el texto o en el pie de foto</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;::hashtag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::email&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::mention&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>El middleware se ejecutar\xE1 si <em>cualquiera de las consultas proporcionadas</em> coincide. El orden de las consultas no importa.</p><h3 id="combinar-con-and" tabindex="-1"><a class="header-anchor" href="#combinar-con-and" aria-hidden="true">#</a> Combinar con AND</h3><p>Si quieres instalar alguna pieza de middleware detr\xE1s de la concatenaci\xF3n AND de dos consultas, puedes encadenar las llamadas a <code>bot<wbr>.on()</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Coincide con las URLs reenviadas</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:forward_date&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Coincide con las fotos que contienen un hashtag en el pie de foto</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:photo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::hashtag&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>El middleware se ejecutar\xE1 si <em>todas las consultas proporcionadas</em> coinciden. El orden de las consultas no importa.</p><h3 id="construccion-de-consultas-complejas" tabindex="-1"><a class="header-anchor" href="#construccion-de-consultas-complejas" aria-hidden="true">#</a> Construcci\xF3n de consultas complejas</h3>`,30),x=n("Es t\xE9cnicamente posible combinar consultas de filtro a f\xF3rmulas m\xE1s complicadas si est\xE1n en "),y={href:"https://en.wikipedia.org/wiki/Conjunctive_normal_form",target:"_blank",rel:"noopener noreferrer"},j=n("CNF"),w=n(", aunque es poco probable que esto sea \xFAtil."),z=e(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot
  <span class="token comment">// Coincide con todas las publicaciones del canal o los mensajes reenviados ...</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;channel_post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:forward_date&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// ... que contengan texto ...</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// ... con al menos una URL, un hashtag o un cashtag.</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;::url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::hashtag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::cashtag&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La inferencia de tipo de <code>ctx</code> recorrer\xE1 toda la cadena de llamadas e inspeccionar\xE1 cada elemento de las tres llamadas a <code>.on</code>. Como ejemplo, puede detectar que <code>ctx<wbr>.msg<wbr>.text</code> es una propiedad necesaria para el fragmento de c\xF3digo anterior.</p><h2 id="consejos-utiles-1" tabindex="-1"><a class="header-anchor" href="#consejos-utiles-1" aria-hidden="true">#</a> Consejos \xFAtiles</h2>`,3),C=n("Aqu\xED hay algunas caracter\xEDsticas menos conocidas de las consultas de filtro que pueden ser \xFAtiles. Algunas de ellas son un poco avanzadas, as\xED que no dudes en pasar a la "),E=n("siguiente secci\xF3n"),L=n("."),F=e(`<h3 id="actualizaciones-de-los-miembros-del-chat" tabindex="-1"><a class="header-anchor" href="#actualizaciones-de-los-miembros-del-chat" aria-hidden="true">#</a> Actualizaciones de los miembros del chat</h3><p>Puedes utilizar la siguiente consulta de filtro para recibir actualizaciones de estado sobre tu bot.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mi_miembro_del_chat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// iniciar, detener, unirse o abandonar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>En los chats privados, esto se activa cuando el bot se inicia o se detiene. En los grupos, esto se dispara cuando el bot es a\xF1adido o eliminado. Ahora puedes inspeccionar <code>ctx<wbr>.my<wbr>Chat<wbr>Member</code> para saber qu\xE9 ha pasado exactamente.</p><p>Esto no debe confundirse con</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;chat_member&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>que se puede utilizar para detectar los cambios de estado de otros miembros del chat, como cuando la gente se une, es promovida, etc.</p><blockquote><p>Ten en cuenta que las actualizaciones de <code>chat<wbr>_member</code> deben ser habilitadas expl\xEDcitamente especificando <code>allowed<wbr>_updates</code> al iniciar tu bot.</p></blockquote><h3 id="combinacion-de-consultas-con-otros-metodos" tabindex="-1"><a class="header-anchor" href="#combinacion-de-consultas-con-otros-metodos" aria-hidden="true">#</a> Combinaci\xF3n de consultas con otros m\xE9todos</h3>`,9),A=n("Puedes combinar consultas de filtro con otros m\xE9todos de la clase "),P=s("code",null,"Composer",-1),R=n(" ("),S={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Composer",target:"_blank",rel:"noopener noreferrer"},N=n("Referencia de la API"),Y=n("), como "),I=s("code",null,"command",-1),T=n(" o "),U=s("code",null,"filter",-1),O=n(". Esto permite crear potentes patrones de manejo de mensajes."),Q=e(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:forward_date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;help&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// comandos /help reenviados</span>

<span class="token comment">// Solo maneja comandos en chats privados.</span>
<span class="token keyword">const</span> pm <span class="token operator">=</span> bot<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>chat<span class="token operator">?.</span>type <span class="token operator">===</span> <span class="token string">&quot;private&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;help&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filtrado-por-tipo-de-remitente-del-mensaje" tabindex="-1"><a class="header-anchor" href="#filtrado-por-tipo-de-remitente-del-mensaje" aria-hidden="true">#</a> Filtrado por tipo de remitente del mensaje</h3><p>Hay cinco tipos diferentes de autores de mensajes en Telegram:</p>`,3),D=s("li",null,"Autores de mensajes del canal",-1),M=s("li",null,"Reenv\xEDos autom\xE1ticos desde canales vinculados en grupos de discusi\xF3n",-1),V=s("li",null,"Cuentas de usuarios normales, esto incluye a los bots (es decir, mensajes \u201Cnormales\u201D)",-1),B=n("Administradores que env\xEDan en nombre del grupo ("),H={href:"https://telegram.org/blog/filters-anonymous-admins-comments#anonymous-group-admins",target:"_blank",rel:"noopener noreferrer"},G=n("administradores an\xF3nimos"),J=n(")"),K=s("li",null,"Usuarios que env\xEDan mensajes como uno de sus canales",-1),W=e(`<p>Puedes combinar las consultas de filtro con otros mecanismos de gesti\xF3n de actualizaciones para averiguar el tipo de autor del mensaje.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Mensajes del canal enviados por \`ctx.senderChat\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;channel_post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Reenv\xEDo autom\xE1tico desde el canal \`ctx.senderChat\`:</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:is_automatic_forward&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Mensajes regulares enviados por \`ctx.from\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mensaje&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>senderChat <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Administrador an\xF3nimo en \`ctx.chat\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>senderChat<span class="token operator">?.</span>id <span class="token operator">===</span> ctx<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Usuarios que env\xEDan mensajes en nombre de su canal \`ctx.senderChat\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  ctx<span class="token punctuation">.</span>senderChat <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>senderChat<span class="token punctuation">.</span>id <span class="token operator">!==</span> ctx<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>id
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filtrado-por-propiedades-del-usuario" tabindex="-1"><a class="header-anchor" href="#filtrado-por-propiedades-del-usuario" aria-hidden="true">#</a> Filtrado por propiedades del usuario</h3><p>Si quieres filtrar por otras propiedades de un usuario, tienes que realizar una petici\xF3n adicional, por ejemplo <code>await ctx<wbr>.get<wbr>Author()</code> para el autor del mensaje. Las consultas de filtrado no realizar\xE1n secretamente otras peticiones a la API por ti. Sigue siendo sencillo realizar este tipo de filtrado:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mensaje&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;creador&quot;</span> <span class="token operator">|</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;administrador&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Maneja los mensajes de los creadores y administradores.</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reutilizacion-de-la-logica-de-consulta-del-filtro" tabindex="-1"><a class="header-anchor" href="#reutilizacion-de-la-logica-de-consulta-del-filtro" aria-hidden="true">#</a> Reutilizaci\xF3n de la l\xF3gica de consulta del filtro</h3><p>Internamente, <code>bot<wbr>.on</code> se basa en una funci\xF3n llamada <code>match<wbr>Filter</code>. Toma una consulta de filtro y la compila en una funci\xF3n de predicado. El predicado se pasa simplemente a <code>bot<wbr>.filter</code> para filtrar las actualizaciones.</p><p>Puedes importar <code>match<wbr>Filter</code> directamente si quieres usarlo en tu propia l\xF3gica. Por ejemplo, puedes decidir eliminar todas las actualizaciones que coincidan con una determinada consulta:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Deja caer todos los mensajes de texto o las publicaciones del canal de texto.</span>
bot<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">matchFilter</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>An\xE1logamente, puedes hacer uso de los tipos de consulta de filtro que grammY utiliza internamente:</p><h3 id="reutilizacion-de-los-tipos-de-consulta-de-filtro" tabindex="-1"><a class="header-anchor" href="#reutilizacion-de-los-tipos-de-consulta-de-filtro" aria-hidden="true">#</a> Reutilizaci\xF3n de los tipos de consulta de filtro</h3><p>Internamente, <code>match<wbr>Filter</code> utiliza los [type predicates] de TypeScript (https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates) para acotar el tipo de <code>ctx</code>. Toma un tipo <code>C extends Context</code> y un <code>Q extends Filter<wbr>Query</code> y produce <code>ctx is Filter&lt;C<wbr>, Q&gt;</code>. En otras palabras, el tipo <code>Filter</code> es lo que realmente recibes para tu <code>ctx</code> en el middleware.</p><p>Puedes importar <code>Filter</code> directamente si quieres utilizarlo en tu propia l\xF3gica. Por ejemplo, puedes decidir definir una funci\xF3n manejadora que maneje objetos de contexto espec\xEDficos que fueron filtrados por una consulta de filtro:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> Filter<span class="token operator">&lt;</span>Context<span class="token punctuation">,</span> <span class="token string">&quot;:text&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// maneja el objeto de contexto filtrado</span>
<span class="token punctuation">}</span>

bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),X=n("Consulta las referencias de la API para "),Z={href:"https://doc.deno.land/https://deno.land/x/grammy/filter.ts/~/matchFilter",target:"_blank",rel:"noopener noreferrer"},$=s("code",null,[n("match"),s("wbr"),n("Filter")],-1),nn=n(", "),sn={href:"https://doc.deno.land/https://deno.land/x/grammy/filter.ts/~/Filter",target:"_blank",rel:"noopener noreferrer"},an=s("code",null,"Filter",-1),en=n(", y "),tn={href:"https://doc.deno.land/https://deno.land/x/grammy/filter.ts/~/FilterQuery",target:"_blank",rel:"noopener noreferrer"},on=s("code",null,[n("Filter"),s("wbr"),n("Query")],-1),cn=n(" para seguir leyendo."),pn=e('<h2 id="el-lenguaje-de-consulta" tabindex="-1"><a class="header-anchor" href="#el-lenguaje-de-consulta" aria-hidden="true">#</a> El lenguaje de consulta</h2><blockquote><p>Esta secci\xF3n est\xE1 pensada para los usuarios que quieran tener un conocimiento m\xE1s profundo de las consultas de filtrado en grammY, pero no contiene ning\xFAn conocimiento necesario para crear un bot.</p></blockquote><h3 id="estructura-de-la-consulta" tabindex="-1"><a class="header-anchor" href="#estructura-de-la-consulta" aria-hidden="true">#</a> Estructura de la consulta</h3><p>Cada consulta consta de un m\xE1ximo de tres partes de consulta. Dependiendo del n\xFAmero de partes de consulta que tenga una consulta, diferenciamos entre consultas L1, L2 y L3, como <code>&quot;message&quot;</code>, <code>&quot;message:<wbr>entities&quot;</code> y <code>&quot;message:<wbr>entities:<wbr>url&quot;</code>, respectivamente.</p><p>Las partes de la consulta est\xE1n separadas por dos puntos (<code>:</code>). Nos referimos a la parte hasta los primeros dos puntos o el final de la cadena de consulta como la <em>L1 parte</em> de una consulta. La parte desde los primeros dos puntos hasta los segundos o hasta el final de la cadena de consulta se denomina parte <em>L2</em> de la consulta. La parte que va desde los segundos dos puntos hasta el final de la cadena de consulta se denomina parte <em>L3</em> de la consulta.</p><p>Ejemplo:</p><table><thead><tr><th>Filter Query</th><th>L1 part</th><th>L2 part</th><th>L3 part</th></tr></thead><tbody><tr><td><code>&quot;message&quot;</code></td><td><code>&quot;message&quot;</code></td><td><code>undefined</code></td><td><code>undefined</code></td></tr><tr><td><code>&quot;message:<wbr>entities&quot;</code></td><td><code>&quot;message&quot;</code></td><td><code>&quot;entities&quot;</code></td><td><code>undefined</code></td></tr><tr><td><code>&quot;message:<wbr>entities:<wbr>mention&quot;</code></td><td><code>&quot;message&quot;</code></td><td><code>&quot;entities&quot;</code></td><td><code>&quot;mention&quot;</code></td></tr></tbody></table><h3 id="validacion-de-consultas" tabindex="-1"><a class="header-anchor" href="#validacion-de-consultas" aria-hidden="true">#</a> Validaci\xF3n de consultas</h3><p>Aunque el sistema de tipos deber\xEDa detectar todas las consultas de filtro inv\xE1lidas en tiempo de compilaci\xF3n, grammY tambi\xE9n comprueba todas las consultas de filtro pasadas en tiempo de ejecuci\xF3n durante la configuraci\xF3n. Cada consulta de filtro pasada se compara con una estructura de validaci\xF3n que comprueba si es v\xE1lida. No s\xF3lo es bueno fallar inmediatamente durante la configuraci\xF3n en lugar de en tiempo de ejecuci\xF3n, tambi\xE9n ha sucedido antes que los errores en TypeScript causen serios problemas con el sofisticado sistema de inferencia de tipos que potencia las consultas de filtro. Si esto vuelve a ocurrir en el futuro, esto evitar\xE1 problemas que podr\xEDan ocurrir de otra manera. En este caso, se le proporcionar\xE1n mensajes de error \xFAtiles.</p><h3 id="rendimiento" tabindex="-1"><a class="header-anchor" href="#rendimiento" aria-hidden="true">#</a> Rendimiento</h3><p><strong>grammY puede comprobar cada consulta de filtro en tiempo constante (amortizado) por actualizaci\xF3n</strong>, independientemente de la estructura de la consulta o de la actualizaci\xF3n entrante.</p><p>La validaci\xF3n de las consultas de filtrado ocurre s\xF3lo una vez, cuando se inicializa el bot y se llama a <code>bot<wbr>.on()</code>.</p><p>Al iniciarse, grammY deriva una funci\xF3n de predicado de la consulta de filtro dividi\xE9ndola en sus partes de consulta. Cada parte se asigna a una funci\xF3n que realiza una \xFAnica comprobaci\xF3n <code>in</code>, o dos comprobaciones si la parte se omite y hay que comprobar dos valores. Estas funciones se combinan entonces para formar un predicado que s\xF3lo tiene que comprobar tantos valores como sean relevantes para la consulta, sin iterar sobre las claves del objeto <code>Update</code>.</p><p>Este sistema utiliza menos operaciones que algunas bibliotecas de la competencia, que necesitan realizar comprobaciones de contenci\xF3n en arrays cuando se enrutan las actualizaciones. El sistema de consulta de filtros de grammY es mucho m\xE1s potente.</p>',14);function ln(un,dn){const o=c("RouterLink"),t=c("ExternalLinkIcon");return u(),d("div",null,[m,s("p",null,[k,b,h,a(o,{to:"/es/guide/context.html#acciones-disponibles"},{default:p(()=>[v]),_:1}),g,f,q]),_,s("p",null,[x,s("a",y,[j,a(t)]),w]),z,s("p",null,[C,a(o,{to:"/es/guide/commands.html"},{default:p(()=>[E]),_:1}),L]),F,s("p",null,[A,P,R,s("a",S,[N,a(t)]),Y,I,T,U,O]),Q,s("ol",null,[D,M,V,s("li",null,[B,s("a",H,[G,a(t)]),J]),K]),W,s("blockquote",null,[s("p",null,[X,s("a",Z,[$,a(t)]),nn,s("a",sn,[an,a(t)]),en,s("a",tn,[on,a(t)]),cn])]),pn])}const kn=l(r,[["render",ln],["__file","filter-queries.html.vue"]]);export{kn as default};
