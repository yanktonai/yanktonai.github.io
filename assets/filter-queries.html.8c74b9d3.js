import{_ as c}from"./filter-query-search.b06c500c.js";import{_ as u,r as p,o as r,c as l,a as s,b as e,w as i,e as a,d as n}from"./app.34388d32.js";const d={},h=a('<h1 id="filter-queries-and-bot-on" tabindex="-1"><a class="header-anchor" href="#filter-queries-and-bot-on" aria-hidden="true">#</a> Filter Queries and <code>bot<wbr>.on()</code></h1><p>The first argument of <code>bot<wbr>.on()</code> is a string called <em>filter query</em>.</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Most (all?) other bot frameworks allow you to perform a primitive form of filtering for updates, e.g. only <code>on(&quot;message&quot;)</code> and the like. Other filtering of messages is left to the developer, which often leads to endless <code>if</code> statements in their code.</p><p>On the contrary, <strong>grammY ships with its own query language</strong> that you can use in order to <strong>filter for exactly the messages</strong> you want.</p><p>This allows for over 650 different filters to be used, and we may add more over time. Every valid filter can be auto-completed in your code editor. Hence, you can simply type <code>bot<wbr>.on(&quot;&quot;)</code>, open auto-complete, and search through all queries by typing something.</p><p><img src="'+c+`" alt="Filter Query Search"></p><p>The type inference of <code>bot<wbr>.on()</code> will comprehend the filter query you picked. It therefore tightens a few types on the context that are known to exist.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Could be undefined if the received message has no text.</span>
  <span class="token keyword">const</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:text&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Text is always defined because this handler is called when a text message is received.</span>
  <span class="token keyword">const</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In a sense, grammY implements the filter queries both at runtime, and on the type level.</p><h2 id="example-queries" tabindex="-1"><a class="header-anchor" href="#example-queries" aria-hidden="true">#</a> Example Queries</h2><p>Here are some example queries:</p><h3 id="regular-queries" tabindex="-1"><a class="header-anchor" href="#regular-queries" aria-hidden="true">#</a> Regular Queries</h3><p>Simple filters for updates, and sub-filters:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// called when any message is received</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// only text messages</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:photo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// only photo messages</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-for-entities" tabindex="-1"><a class="header-anchor" href="#filter-for-entities" aria-hidden="true">#</a> Filter for Entities</h3><p>Sub-filters that go one level deeper:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:entities:url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// messages containing a URL</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:entities:code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// messages containing a code snippet</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edited_message:entities&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// edited messages with any kind of entities</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omit-values" tabindex="-1"><a class="header-anchor" href="#omit-values" aria-hidden="true">#</a> Omit Values</h3><p>You can omit some values in the filter queries. grammY will then search through different values to match your query.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any text messages and any text post of channels</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message::url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// messages with URL in text or caption (photos, etc)</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// messages or channel posts with email in text or caption</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),m=n("Leaving out the "),k=s("em",null,"first",-1),g=n(" value matches both messages and channel posts. "),b=n("Remember"),f=n(" that "),v=s("code",null,[n("ctx"),s("wbr"),n(".msg")],-1),y=n(" gives you access to both messages or channel posts, whichever is matched by the query."),q=a(`<p>Leaving out the <em>second</em> value matches both entities and caption entities. You can leave out both the first and the second part at the same time.</p><h3 id="shortcuts" tabindex="-1"><a class="header-anchor" href="#shortcuts" aria-hidden="true">#</a> Shortcuts</h3><p>The query engine of grammY allows to define neat shortcuts that group related queries together.</p><h4 id="msg" tabindex="-1"><a class="header-anchor" href="#msg" aria-hidden="true">#</a> <code>msg</code></h4><p>The <code>msg</code> shortcut groups new messages and new channel posts. In other words, using <code>msg</code> is equivalent to listening for both <code>&quot;message&quot;</code> and <code>&quot;channel<wbr>_post&quot;</code> events.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any message or channel post</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;msg:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exactly the same as \`:text\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="edit" tabindex="-1"><a class="header-anchor" href="#edit" aria-hidden="true">#</a> <code>edit</code></h4><p>This <code>edit</code> shortcut groups edited messages and edited channel posts.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any message or channel post edit</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// edits of text messages</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit::url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// edits of messages with URL in text or caption</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit:location&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// live location updated</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="media" tabindex="-1"><a class="header-anchor" href="#media" aria-hidden="true">#</a> <code>:<wbr>media</code></h4><p>The <code>:<wbr>media</code> shortcut groups photo and video messages.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:media&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// photo and video messages</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edited_channel_post:media&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// edited channel posts with media</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:media&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// media messages or channel posts</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> <code>:<wbr>file</code></h4><p>The <code>:<wbr>file</code> shortcut groups all messages that contain a file. Hence, you can be sure that <code>await ctx<wbr>.get<wbr>File()</code> will give you a file object.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// files in messages or channel posts</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;edit:file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// edits to file messages or file channel posts</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="syntactic-sugar" tabindex="-1"><a class="header-anchor" href="#syntactic-sugar" aria-hidden="true">#</a> Syntactic Sugar</h3><p>There are two special cases for the query parts that make filtering for users more convenient. You can detect bots in queries with the <code>:<wbr>is<wbr>_bot</code> query part. The syntactic sugar <code>:<wbr>me</code> can be used to refer to your bot from within a query, which will compare the user identifiers for you.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// A service message about a bot that joined the chat</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:new_chat_members:is_bot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// A service message about your bot being removed</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:left_chat_member:me&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that while this syntactic sugar is useful to work with service messages, is should not be used to detect if someone actually joins or leaves a chat. Services messages are messages that inform the users in the chat, and some of them will not be visible in all cases. For example, in large groups, there will not be any service messages about users that join or leave the chat. Hence, your bot may not notice this. Instead, you should listen for <a href="#chat-member-updates">chat member updates</a>.</p><h2 id="combining-multiple-queries" tabindex="-1"><a class="header-anchor" href="#combining-multiple-queries" aria-hidden="true">#</a> Combining Multiple Queries</h2><p>You can combine any number of filter queries with AND as well as OR operations.</p><h3 id="combine-with-or" tabindex="-1"><a class="header-anchor" href="#combine-with-or" aria-hidden="true">#</a> Combine With OR</h3><p>If you want to install some piece of middleware behind the OR concatenation of two queries, you can pass both of them to <code>bot<wbr>.on()</code> in an array.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Runs if the update is about a message OR an edit to a message</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;edited_message&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Runs if a hashtag OR email OR mention entity is found in text or caption</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;::hashtag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::email&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::mention&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The middleware will be executed if <em>any of the provided queries</em> matches. The order of the queries does not matter.</p><h3 id="combine-with-and" tabindex="-1"><a class="header-anchor" href="#combine-with-and" aria-hidden="true">#</a> Combine With AND</h3><p>If you want to install some piece of middleware behind the AND concatenation of two queries, you can chain the calls to <code>bot<wbr>.on()</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Matches forwarded URLs</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:forward_date&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Matches photos that contain a hashtag in a photo&#39;s caption</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:photo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;::hashtag&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The middleware will be executed if <em>all of the provided queries</em> match. The order of the queries does not matter.</p><h3 id="building-complex-queries" tabindex="-1"><a class="header-anchor" href="#building-complex-queries" aria-hidden="true">#</a> Building Complex Queries</h3>`,30),w=n("It is technically possible to combine filter queries to more complicated formulas if they are in "),_={href:"https://en.wikipedia.org/wiki/Conjunctive_normal_form",target:"_blank",rel:"noopener noreferrer"},x=n("CNF"),T=n(", even though this is unlikely to be useful."),F=a(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot
  <span class="token comment">// Matches all channel posts or forwarded messages ...</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;channel_post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:forward_date&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// ... that contain text ...</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// ... with at least one URL, hashtag, or cashtag.</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;::url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::hashtag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;::cashtag&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The type inference of <code>ctx</code> will scan through the entire call chain and inspect every element of all three <code>.on</code> calls. As an example, it can detect that <code>ctx<wbr>.msg<wbr>.text</code> is a required property for the above code snippet.</p><h2 id="useful-tips" tabindex="-1"><a class="header-anchor" href="#useful-tips" aria-hidden="true">#</a> Useful Tips</h2>`,3),C=n("Here are some less-known features of filter queries that can come in handy. Some of them are a little advanced, so feel free to move on to the "),I=n("next section"),L=n("."),R=a(`<h3 id="chat-member-updates" tabindex="-1"><a class="header-anchor" href="#chat-member-updates" aria-hidden="true">#</a> Chat Member Updates</h3><p>You can use the following filter query to receive status updates about your bot.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;my_chat_member&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// start, stop, join, or leave</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In private chats, this triggers when the bot is started or stopped. In groups, this triggers when the bot is added or removed. You can now inspect <code>ctx<wbr>.my<wbr>Chat<wbr>Member</code> to figure out what exactly happened.</p><p>This is not to be confused with</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;chat_member&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>which can be used to detect status changes of other chat members, such as when people join, get promoted, and so on.</p><blockquote><p>Note that <code>chat<wbr>_member</code> updates need to be enabled explicitly by specifying <code>allowed<wbr>_updates</code> when starting your bot.</p></blockquote><h3 id="combining-queries-with-other-methods" tabindex="-1"><a class="header-anchor" href="#combining-queries-with-other-methods" aria-hidden="true">#</a> Combining Queries With Other Methods</h3>`,9),Y=n("You can combine filter queries with other methods on the "),Q=s("code",null,"Composer",-1),A=n(" class ("),S={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Composer",target:"_blank",rel:"noopener noreferrer"},N=n("API Reference"),O=n("), such as "),E=s("code",null,"command",-1),U=n(" or "),j=s("code",null,"filter",-1),M=n(". This allows for powerful message handling patterns."),H=a(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:forward_date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;help&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// forwarded /help commands</span>

<span class="token comment">// Only handle commands in private chats.</span>
<span class="token keyword">const</span> pm <span class="token operator">=</span> bot<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>chat<span class="token operator">?.</span>type <span class="token operator">===</span> <span class="token string">&quot;private&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;help&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filtering-by-message-sender-type" tabindex="-1"><a class="header-anchor" href="#filtering-by-message-sender-type" aria-hidden="true">#</a> Filtering by Message Sender Type</h3><p>There are five different possible types of message authors on Telegram:</p>`,3),V=s("li",null,"Channel post authors",-1),W=s("li",null,"Automatic forwards from linked channels in discussion groups",-1),D=s("li",null,"Normal user accounts, this includes bots (i.e. \u201Cnormal\u201D messages)",-1),P=n("Admins sending on behalf of the group ("),B={href:"https://telegram.org/blog/filters-anonymous-admins-comments#anonymous-group-admins",target:"_blank",rel:"noopener noreferrer"},z=n("anonymous admins"),G=n(")"),J=s("li",null,"Users sending messages as one of their channels",-1),K=a(`<p>You can combine filter queries with other update handling mechanisms to find out the type of the message author.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Channel posts sent by \`ctx.senderChat\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;channel_post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Automatic forward from the channel \`ctx.senderChat\`:</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message:is_automatic_forward&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Regular messages sent by \`ctx.from\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>senderChat <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Anonymous admin in \`ctx.chat\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>senderChat<span class="token operator">?.</span>id <span class="token operator">===</span> ctx<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Users sending messages on behalf of their channel \`ctx.senderChat\`</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  ctx<span class="token punctuation">.</span>senderChat <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>senderChat<span class="token punctuation">.</span>id <span class="token operator">!==</span> ctx<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>id
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filtering-by-user-properties" tabindex="-1"><a class="header-anchor" href="#filtering-by-user-properties" aria-hidden="true">#</a> Filtering by User Properties</h3><p>If you want to filter by other properties of a user, you need to perform an additional request, e.g. <code>await ctx<wbr>.get<wbr>Author()</code> for the author of the message. Filter queries will not secretly perform further API requests for you. It is still simple to perform this kind of filtering:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;creator&quot;</span> <span class="token operator">||</span> user<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;administrator&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Handles messages from creators and admins.</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reusing-filter-query-logic" tabindex="-1"><a class="header-anchor" href="#reusing-filter-query-logic" aria-hidden="true">#</a> Reusing Filter Query Logic</h3><p>Internally, <code>bot<wbr>.on</code> relies on a function called <code>match<wbr>Filter</code>. It takes a filter query and compiles it down to a predicate function. The predicate is simply passed to <code>bot<wbr>.filter</code> in order to filter for updates.</p><p>You can import <code>match<wbr>Filter</code> directly if you want to use it in your own logic. For example, you can decide to drop all updates that match a certain query:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Drop all text messages or text channel posts.</span>
bot<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token function">matchFilter</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Analogously, you can make use of the filter query types that grammY uses internally:</p><h3 id="reusing-filter-query-types" tabindex="-1"><a class="header-anchor" href="#reusing-filter-query-types" aria-hidden="true">#</a> Reusing Filter Query Types</h3>`,11),X=n("Internally, "),Z=s("code",null,[n("match"),s("wbr"),n("Filter")],-1),$=n(" uses TypeScript\u2019s "),nn={href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates",target:"_blank",rel:"noopener noreferrer"},sn=n("type predicates"),en=a(" to narrow down the type of <code>ctx</code>. It takes a type <code>C extends Context</code> and a <code>Q extends Filter<wbr>Query</code> and produces <code>ctx is Filter&lt;C<wbr>, Q&gt;</code>. In other words, the <code>Filter</code> type is what you actually receive for your <code>ctx</code> in the middleware.",13),an=a(`<p>You can import <code>Filter</code> directly if you want to use it in your own logic. For example, you can decide to define a handler function that handles specific context objects which were filtered by a filter query:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> Filter<span class="token operator">&lt;</span>Context<span class="token punctuation">,</span> <span class="token string">&quot;:text&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle narrowed context object</span>
<span class="token punctuation">}</span>

bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;:text&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),tn=n("Check out the API references for "),on={href:"https://doc.deno.land/https://deno.land/x/grammy/filter.ts/~/matchFilter",target:"_blank",rel:"noopener noreferrer"},pn=s("code",null,[n("match"),s("wbr"),n("Filter")],-1),cn=n(", "),un={href:"https://doc.deno.land/https://deno.land/x/grammy/filter.ts/~/Filter",target:"_blank",rel:"noopener noreferrer"},rn=s("code",null,"Filter",-1),ln=n(", and "),dn={href:"https://doc.deno.land/https://deno.land/x/grammy/filter.ts/~/FilterQuery",target:"_blank",rel:"noopener noreferrer"},hn=s("code",null,[n("Filter"),s("wbr"),n("Query")],-1),mn=n(" to read on."),kn=a('<h2 id="the-query-language" tabindex="-1"><a class="header-anchor" href="#the-query-language" aria-hidden="true">#</a> The Query Language</h2><blockquote><p>This section is meant for users who want to have a deeper understanding of filter queries in grammY, but it does not contain any knowledge required to create a bot.</p></blockquote><h3 id="query-structure" tabindex="-1"><a class="header-anchor" href="#query-structure" aria-hidden="true">#</a> Query Structure</h3><p>Every query consists of up to three query parts. Depending on how many query parts a query has, we differentiate between L1, L2, and L3 queries, such as <code>&quot;message&quot;</code>, <code>&quot;message:<wbr>entities&quot;</code>, and <code>&quot;message:<wbr>entities:<wbr>url&quot;</code>, respectively.</p><p>The query parts are separated by colons (<code>:</code>). We refer to the part up to the first colon or the end of the query string as the <em>L1 part</em> of a query. We refer to the part from the first colon to the second colon or to the end of the query string as the <em>L2 part</em> of the query. We refer to the part from the second colon to the end of the query string as the <em>L3 part</em> of the query.</p><p>Example:</p><table><thead><tr><th>Filter Query</th><th>L1 part</th><th>L2 part</th><th>L3 part</th></tr></thead><tbody><tr><td><code>&quot;message&quot;</code></td><td><code>&quot;message&quot;</code></td><td><code>undefined</code></td><td><code>undefined</code></td></tr><tr><td><code>&quot;message:<wbr>entities&quot;</code></td><td><code>&quot;message&quot;</code></td><td><code>&quot;entities&quot;</code></td><td><code>undefined</code></td></tr><tr><td><code>&quot;message:<wbr>entities:<wbr>mention&quot;</code></td><td><code>&quot;message&quot;</code></td><td><code>&quot;entities&quot;</code></td><td><code>&quot;mention&quot;</code></td></tr></tbody></table><h3 id="query-validation" tabindex="-1"><a class="header-anchor" href="#query-validation" aria-hidden="true">#</a> Query Validation</h3><p>Even though the type system should catch all invalid filter queries at compile time, grammY also checks all passed filter queries at runtime during setup. Every passed filter query is matched against a validation structure that checks if it is valid. Not only is it good to fail immediately during setup instead of at runtime, it has also happened before that bugs in TypeScript cause serious problems with the sophisticated type inference system that powers filter queries. If this happens again in the future, this will prevent issues that could otherwise occur. In this case, you will be provided with helpful error messages.</p><h3 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h3><p><strong>grammY can check every filter query in (amortized) constant time per update</strong>, independent of the structure of the query or the incoming update.</p><p>The validation of the filter queries happens only once, when the bot is initialized and <code>bot<wbr>.on()</code> is called.</p><p>On start-up, grammY derives a predicate function from the filter query by splitting it into its query parts. Every part will be mapped to a function that performs a single <code>in</code> check, or two checks if the part is omitted and two values need to be checked. These functions are then combined to form a predicate that only has to check for as many values as are relevant for the query, without iterating over the object keys of <code>Update</code>.</p><p>This system uses less operations than some competing libraries, which need to perform containment checks in arrays when routing updates. grammY\u2019s filter query system is much more powerful.</p>',14);function gn(bn,fn){const o=p("RouterLink"),t=p("ExternalLinkIcon");return r(),l("div",null,[h,s("p",null,[m,k,g,e(o,{to:"/guide/context.html#available-actions"},{default:i(()=>[b]),_:1}),f,v,y]),q,s("p",null,[w,s("a",_,[x,e(t)]),T]),F,s("p",null,[C,e(o,{to:"/guide/commands.html"},{default:i(()=>[I]),_:1}),L]),R,s("p",null,[Y,Q,A,s("a",S,[N,e(t)]),O,E,U,j,M]),H,s("ol",null,[V,W,D,s("li",null,[P,s("a",B,[z,e(t)]),G]),J]),K,s("p",null,[X,Z,$,s("a",nn,[sn,e(t)]),en]),an,s("blockquote",null,[s("p",null,[tn,s("a",on,[pn,e(t)]),cn,s("a",un,[rn,e(t)]),ln,s("a",dn,[hn,e(t)]),mn])]),kn])}const qn=u(d,[["render",gn],["__file","filter-queries.html.vue"]]);export{qn as default};
