import{_ as i,r as n,o as l,c as d,a as o,b as a,w as s,d as e,e as c}from"./app.ff0cf306.js";const u={},m=o("h1",{id:"escalando-iv-limites",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#escalando-iv-limites","aria-hidden":"true"},"#"),e(" Escalando IV: L\xEDmites")],-1),p=e("Telegram restringe cu\xE1ntos mensajes puede enviar su bot por segundo, que se puede consultar en "),_={href:"https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this",target:"_blank",rel:"noopener noreferrer"},h=e("Bot FAQ"),b=e(". Siempre debes asegurarte de mantenerte por debajo de estos l\xEDmites, de lo contrario tu bot ser\xE1 limitado. Si ignoras estos errores, tu bot puede acabar siendo baneado."),g=c('<h2 id="la-solucion-sencilla" tabindex="-1"><a class="header-anchor" href="#la-solucion-sencilla" aria-hidden="true">#</a> La soluci\xF3n sencilla</h2><div class="custom-container warning"><p class="custom-container-title">No es una soluci\xF3n real</p><p>Esta secci\xF3n resuelve tu problema a corto plazo, pero si est\xE1s construyendo un bot que realmente debe escalar bien, lee la <a href="#la-soluci%C3%B3n-real-recomendada">siguiente subsecci\xF3n</a> en su lugar.</p></div><p>Hay una soluci\xF3n muy simple para golpear los l\xEDmites de velocidad: si una solicitud de la API falla debido a un l\xEDmite de velocidad, simplemente espera el tiempo que Telegram te dice que esperes, y repite la solicitud.</p>',3),f=e("Si quieres hacer esto, puedes utilizar el "),v=e("plugion super sencillo "),y=o("code",null,[e("auto"),o("wbr"),e("-retry")],-1),x=e(". Es una "),q=e("funci\xF3n transformadora de la API"),E=e(" que hace exactamente eso."),j=o("p",null,"Sin embargo, si el tr\xE1fico de tu bot aumenta r\xE1pidamente, por ejemplo, cuando se a\xF1ade a un grupo grande, puede encontrarse con muchos errores de limitaci\xF3n de velocidad antes de que el pico de tr\xE1fico se asiente. Esto podr\xEDa llevar a un baneo. Adem\xE1s, como las peticiones pueden intentarse varias veces, tu servidor consumir\xE1 m\xE1s RAM y ancho de banda de lo necesario. En lugar de solucionar el problema a posteriori, es mucho mejor poner en cola todas las peticiones de la API y enviarlas s\xF3lo a la velocidad permitida:",-1),k=o("h2",{id:"la-solucion-real-recomendada",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#la-solucion-real-recomendada","aria-hidden":"true"},"#"),e(" La soluci\xF3n real (recomendada)")],-1),L=e("grammY le proporciona el "),w=e("plugin throttler"),A=e(" que hace que tu bot respete autom\xE1ticamente todos los l\xEDmites de velocidad poniendo en cola las peticiones salientes de tu bot en una cola de mensajes. Este plugin es igual de sencillo de configurar, pero hace un trabajo mucho mejor en el control de peticiones. No hay realmente ninguna buena raz\xF3n para usar "),I=e("auto"),N=o("wbr",null,null,-1),B=e("-retry"),S=e(" sobre el "),V=e("plugin throttler"),z=e(". En algunos casos puede tener sentido usar ambos.");function C(P,R){const r=n("ExternalLinkIcon"),t=n("RouterLink");return l(),d("div",null,[m,o("p",null,[p,o("a",_,[h,a(r)]),b]),g,o("p",null,[f,a(t,{to:"/es/plugins/auto-retry.html"},{default:s(()=>[v,y]),_:1}),x,a(t,{to:"/es/advanced/transformers.html"},{default:s(()=>[q]),_:1}),E]),j,k,o("p",null,[L,a(t,{to:"/es/plugins/transformer-throttler.html"},{default:s(()=>[w]),_:1}),A,a(t,{to:"/es/plugins/auto-retry.html"},{default:s(()=>[I,N,B]),_:1}),S,a(t,{to:"/es/plugins/transformer-throttler.html"},{default:s(()=>[V]),_:1}),z])])}const F=i(u,[["render",C],["__file","flood.html.vue"]]);export{F as default};
