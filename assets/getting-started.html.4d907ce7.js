import{_ as u,r as c,o as r,c as d,a as n,b as e,w as a,e as i,d as s}from"./app.c0ce12a9.js";const m={},k=i('<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><p>Create your first bot in minutes. (Scroll <a href="#getting-started-on-deno">down</a> for a Deno guide.)</p><h2 id="getting-started-on-node-js" tabindex="-1"><a class="header-anchor" href="#getting-started-on-node-js" aria-hidden="true">#</a> Getting Started on Node.js</h2>',3),b=s("This guide assumes that you have "),h={href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"},g=s("Node"),v=n("wbr",null,null,-1),_=s(".js"),y=s(" installed, and "),f=n("code",null,"npm",-1),w=s(" should come with it. If you don\u2019t know what these things are, check out our "),x=s("Introduction"),T=s("!"),q=n("p",null,[s("Create a new TypeScript project and install the "),n("code",null,"grammy"),s(" package. Do this by opening a terminal and typing:")],-1),B=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Create a new directory and change into it."),s(`
`),n("span",{class:"token function"},"mkdir"),s(` my-bot
`),n("span",{class:"token builtin class-name"},"cd"),s(` my-bot

`),n("span",{class:"token comment"},"# Set up TypeScript (skip if you use JavaScript)."),s(`
`),n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(),n("span",{class:"token parameter variable"},"-D"),s(` typescript
npx tsc `),n("span",{class:"token parameter variable"},"--init"),s(`

`),n("span",{class:"token comment"},"# Install grammY."),s(`
`),n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(` grammy
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Create a new directory and change into it."),s(`
`),n("span",{class:"token function"},"mkdir"),s(` my-bot
`),n("span",{class:"token builtin class-name"},"cd"),s(` my-bot

`),n("span",{class:"token comment"},"# Set up TypeScript (skip if you use JavaScript)."),s(`
`),n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"add"),s(" typescript "),n("span",{class:"token parameter variable"},"-D"),s(`
npx tsc `),n("span",{class:"token parameter variable"},"--init"),s(`

`),n("span",{class:"token comment"},"# Install grammY."),s(`
`),n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"add"),s(` grammy
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Create a new directory and change into it."),s(`
`),n("span",{class:"token function"},"mkdir"),s(` my-bot
`),n("span",{class:"token builtin class-name"},"cd"),s(` my-bot

`),n("span",{class:"token comment"},"# Set up TypeScript (skip if you use JavaScript)."),s(`
`),n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"add"),s(),n("span",{class:"token parameter variable"},"-D"),s(` typescript
npx tsc `),n("span",{class:"token parameter variable"},"--init"),s(`

`),n("span",{class:"token comment"},"# Install grammY."),s(`
`),n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"add"),s(` grammy
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,[s("Create a new empty text file, e.g. called "),n("code",null,[s("bot"),n("wbr"),s(".ts")]),s(". Your folder structure should now look like this:")],-1),C=n("div",{class:"language-asciiart ext-asciiart"},[n("pre",{class:"language-asciiart"},[n("code",null,`.
\u251C\u2500\u2500 bot.ts
\u251C\u2500\u2500 node_modules/
\u251C\u2500\u2500 package.json
\u251C\u2500\u2500 package-lock.json
\u2514\u2500\u2500 tsconfig.json
`)])],-1),G=s("Now, it\u2019s time to open Telegram to create a bot account, and obtain an authentication token for it. Talk to "),D={href:"https://t.me/BotFather",target:"_blank",rel:"noopener noreferrer"},N=s("@Bot"),H=n("wbr",null,null,-1),I=s("Father"),E=s(" to do this. The authentication token looks like "),L=n("code",null,[s("123456:"),n("wbr"),s("a"),n("wbr"),s("BcDeF"),n("wbr"),s("_g"),n("wbr"),s("HiJkLmNoP"),n("wbr"),s("-q")],-1),J=s("."),F=n("p",null,[s("Got the token? You can now code your bot in the "),n("code",null,[s("bot"),n("wbr"),s(".ts")]),s(" file. You can copy the following example bot into that file, and pass your token to the "),n("code",null,"Bot"),s(" constructor:")],-1),U=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create an instance of the `Bot` class and pass your authentication token to it."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// <-- put your authentication token between the ""'),s(`

`),n("span",{class:"token comment"},"// You can now register listeners on your bot object `bot`."),s(`
`),n("span",{class:"token comment"},"// grammY will call the listeners when users send messages to your bot."),s(`

`),n("span",{class:"token comment"},"// Handle the /start command."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Welcome! Up and running."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// Handle other messages."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Got another message!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Now that you specified how to handle messages, you can start your bot."),s(`
`),n("span",{class:"token comment"},"// This will connect to the Telegram servers and wait for messages."),s(`

`),n("span",{class:"token comment"},"// Start the bot."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create an instance of the `Bot` class and pass your authentication token to it."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// <-- put your authentication token between the ""'),s(`

`),n("span",{class:"token comment"},"// You can now register listeners on your bot object `bot`."),s(`
`),n("span",{class:"token comment"},"// grammY will call the listeners when users send messages to your bot."),s(`

`),n("span",{class:"token comment"},"// Handle the /start command."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Welcome! Up and running."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// Handle other messages."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Got another message!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Now that you specified how to handle messages, you can start your bot."),s(`
`),n("span",{class:"token comment"},"// This will connect to the Telegram servers and wait for messages."),s(`

`),n("span",{class:"token comment"},"// Start the bot."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=i(`<p>Compile the code by running</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>in your terminal. This generates the JavaScript file <code>bot<wbr>.js</code>.</p><p>You can now run the bot by executing</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">node</span> bot.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>in your terminal. Done! \u{1F389}</p><p>Head over to Telegram to watch your bot respond to messages!</p><div class="custom-container tip"><p class="custom-container-title">Enabling Logging</p><p>You can enable basic logging by running</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span><span class="token string">&quot;grammy*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>in your terminal before you execute <code>node bot<wbr>.js</code>. This makes it easier to debug your bot.</p></div><h2 id="getting-started-on-deno" tabindex="-1"><a class="header-anchor" href="#getting-started-on-deno" aria-hidden="true">#</a> Getting Started on Deno</h2>`,9),W=s("This guide assumes that you have "),R={href:"https://deno.land",target:"_blank",rel:"noopener noreferrer"},M=s("Deno"),z=s(" installed."),A=n("p",null,[s("Create a new directory somewhere and create a new empty text file in it, e.g. called "),n("code",null,[s("bot"),n("wbr"),s(".ts")]),s(".")],-1),K=s("Now, it\u2019s time to open Telegram to create a bot account, and obtain an authentication token for it. Talk to "),O={href:"https://t.me/BotFather",target:"_blank",rel:"noopener noreferrer"},Q=s("@Bot"),X=n("wbr",null,null,-1),Z=s("Father"),$=s(" to do this. The authentication token looks like "),nn=n("code",null,[s("123456:"),n("wbr"),s("a"),n("wbr"),s("BcDeF"),n("wbr"),s("_g"),n("wbr"),s("HiJkLmNoP"),n("wbr"),s("-q")],-1),sn=s("."),en=i(`<p>Got the token? You can now code your bot in the <code>bot<wbr>.ts</code> file. You can copy the following example bot into that file, and pass your token to the <code>Bot</code> constructor:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Bot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;https://deno.land/x/grammy@v1.11.1/mod.ts&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Create an instance of the \`Bot\` class and pass your authentication token to it.</span>
<span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- put your authentication token between the &quot;&quot;</span>

<span class="token comment">// You can now register listeners on your bot object \`bot\`.</span>
<span class="token comment">// grammY will call the listeners when users send messages to your bot.</span>

<span class="token comment">// Handle the /start command.</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome! Up and running.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Handle other messages.</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Got another message!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Now that you specified how to handle messages, you can start your bot.</span>
<span class="token comment">// This will connect to the Telegram servers and wait for messages.</span>

<span class="token comment">// Start the bot.</span>
bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now run the bot by executing</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>deno run --allow-net bot.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>in your terminal. Done! \u{1F389}</p><p>Head over to Telegram to watch your bot respond to messages!</p><div class="custom-container tip"><p class="custom-container-title">Enabling Logging</p><p>You can enable basic logging by running</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span><span class="token string">&quot;grammy*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>in your terminal before you run your bot. This makes it easier to debug your bot.</p><p>You now need to run the bot using</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>deno run --allow-net --allow-env bot.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>so grammY can detect that <code>DEBUG</code> is set.</p></div>`,7);function an(tn,on){const o=c("ExternalLinkIcon"),p=c("RouterLink"),t=c("CodeGroupItem"),l=c("CodeGroup");return r(),d("div",null,[k,n("blockquote",null,[n("p",null,[b,n("a",h,[g,v,_,e(o)]),y,f,w,e(p,{to:"/guide/introduction.html"},{default:a(()=>[x]),_:1}),T])]),q,e(l,null,{default:a(()=>[e(t,{title:"NPM",active:""},{default:a(()=>[B]),_:1}),e(t,{title:"Yarn"},{default:a(()=>[S]),_:1}),e(t,{title:"pnpm"},{default:a(()=>[Y]),_:1})]),_:1}),j,C,n("p",null,[G,n("a",D,[N,H,I,e(o)]),E,L,J]),F,e(l,null,{default:a(()=>[e(t,{title:"TypeScript",active:""},{default:a(()=>[U]),_:1}),e(t,{title:"JavaScript"},{default:a(()=>[V]),_:1})]),_:1}),P,n("blockquote",null,[n("p",null,[W,n("a",R,[M,e(o)]),z])]),A,n("p",null,[K,n("a",O,[Q,X,Z,e(o)]),$,nn,sn]),en])}const ln=u(m,[["render",an],["__file","getting-started.html.vue"]]);export{ln as default};
