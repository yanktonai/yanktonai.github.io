import{_ as c,r as i,o as l,c as r,a as n,b as a,w as p,d as s,e as o}from"./app.81c9d145.js";const u={},d=n("h1",{id:"la-guia-del-autoestopista-de-los-plugins-de-grammy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#la-guia-del-autoestopista-de-los-plugins-de-grammy","aria-hidden":"true"},"#"),s(" La Gu\xEDa del Autoestopista de los Plugins de grammY")],-1),m=n("p",null,"Si quieres desarrollar tu propio plugin y publicarlo, o si quieres saber c\xF3mo funcionan los plugins de grammY entre bastidores, \xA1este es el lugar para ti!",-1),k=s("Por favor, ten en cuenta que ya hay un resumen sobre los "),g=s("plugins de grammY"),v=s(" son y lo que hacen. Este art\xEDculo es una inmersi\xF3n profunda en su funcionamiento interno."),b=n("h2",{id:"tipos-de-plugins-en-grammy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tipos-de-plugins-en-grammy","aria-hidden":"true"},"#"),s(" Tipos de Plugins en grammY")],-1),h=n("p",null,"Hay dos tipos principales de plugins en grammY:",-1),_=s("Plugins de Middleware: El \xFAnico trabajo del plugin es devolver una "),y=s("funci\xF3n middleware"),f=s(" que puede ser alimentada a un bot de grammY."),q=s("Plugins transformadores: El \xFAnico trabajo del plugin es devolver una "),w=s("funci\xF3n transformadora"),x=s(" que puede ser alimentada a un bot de grammY."),j=n("p",null,"Sin embargo, a veces encontrar\xE1s plugins que hacen ambas cosas. Tambi\xE9n hay otros paquetes que no son ni middleware ni funciones transformadoras, pero los llamaremos plugins de todos modos porque extienden grammY de varias maneras.",-1),E=n("h2",{id:"reglas-de-contribucion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reglas-de-contribucion","aria-hidden":"true"},"#"),s(" Reglas de contribuci\xF3n")],-1),z=n("p",null,"Puedes publicar tus plugins de una de las siguientes formas:",-1),A=n("ul",null,[n("li",null,[s("Publicando como un plugin "),n("strong",null,"oficial"),s(".")]),n("li",null,[s("Publicando como un "),n("strong",null,"plugin de terceros"),s(".")])],-1),D=s("Si decide publicar sus plugins como terceros, podemos ofrecerle un lugar destacado en este sitio web. Sin embargo, preferimos que publiques tu plugin bajo la "),N={href:"https://github.com/grammyjs",target:"_blank",rel:"noopener noreferrer"},C=s("organizaci\xF3n grammyjs"),P=s(" en GitHub, convirti\xE9ndolo as\xED en un plugin oficial. En tal caso, se le conceder\xE1 acceso de publicaci\xF3n a GitHub y npm. Adem\xE1s, ser\xE1s responsable de mantener tu c\xF3digo."),S=n("p",null,"Antes de sumergirte en algunos ejemplos pr\xE1cticos, hay algunas reglas a las que debes prestar atenci\xF3n si quieres que tus plugins aparezcan en este sitio web.",-1),T=n("li",null,[s("Tener un archivo README en GitHub (y npm) con "),n("strong",null,"cortas y claras"),s(" instrucciones de uso.")],-1),Y=s("Explica el prop\xF3sito de tu plugin y c\xF3mo usarlo a\xF1adiendo una p\xE1gina en "),I={href:"https://github.com/grammyjs/website",target:"_blank",rel:"noopener noreferrer"},B=s("docs"),L=s(". (Podemos crear la p\xE1gina por ti si no est\xE1s seguro de c\xF3mo hacerlo)."),M=n("li",null,"Elige una licencia permisiva como MIT o ISC.",-1),H=s("Finalmente, debes saber que aunque grammY soporta tanto Node.js como "),R={href:"https://deno.land/",target:"_blank",rel:"noopener noreferrer"},G=s("Deno"),F=s(", es un proyecto Deno-first, y tambi\xE9n te animamos a escribir tus plugins para Deno (\xA1y posteriormente con estilo!). Existe una pr\xE1ctica herramienta llamada "),V={href:"https://github.com/wojpawlik/deno2node",target:"_blank",rel:"noopener noreferrer"},O=s("deno2node"),U=s(" que transpira tu c\xF3digo de Deno a Node.js para que podamos soportar ambas plataformas por igual. La compatibilidad con Deno s\xF3lo es un requisito estricto para los plugins oficiales, pero no para los de terceros. No obstante, se recomienda encarecidamente probar Deno. No querr\xE1 volver atr\xE1s."),W=o(`<h2 id="diseno-de-un-plugin-middleware-ficticio" tabindex="-1"><a class="header-anchor" href="#diseno-de-un-plugin-middleware-ficticio" aria-hidden="true">#</a> Dise\xF1o de un plugin Middleware ficticio</h2><p>Supongamos que queremos dise\xF1ar un plugin que s\xF3lo responda a determinados usuarios. Por ejemplo, podemos decidir que s\xF3lo se responda a las personas cuyo nombre contenga una determinada palabra. El bot simplemente se negar\xE1 a trabajar para todos los dem\xE1s.</p><p>He aqu\xED un ejemplo ficticio:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// plugin.ts</span>

<span class="token comment">// Importar los tipos de grammY (los reexportamos en \`deps.deno.ts\`).</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Context<span class="token punctuation">,</span> Middleware<span class="token punctuation">,</span> NextFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./deps.deno.ts&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Tu plugin puede tener una funci\xF3n principal que cree el middleware</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">onlyAccept</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> Context<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Crea y devuelve el middleware.</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Obtener el nombre del usuario.</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> ctx<span class="token punctuation">.</span>from<span class="token operator">?.</span>first_name<span class="token punctuation">;</span>
    <span class="token comment">// Deja pasar todas las actualizaciones que coincidan.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Pasar el flujo de control al middleware posterior.</span>
      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Decirles que no nos gustan.</span>
      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\xA1No estoy hablando contigo! No te interesa </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ahora, se puede utilizar en un bot real:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Aqu\xED, el c\xF3digo del plugin est\xE1 en un archivo llamado \`plugin.ts\`.</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> onlyAccept <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./plugin.ts&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Bot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./deps.deno.ts&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- pon tu token de bot aqu\xED</span>

bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">onlyAccept</span><span class="token punctuation">(</span><span class="token string">&quot;grammY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;You passed the middleware plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\xA1Voil\xE0! Ya tienes un plugin, \xBFverdad? Bueno, no tan r\xE1pido. Todav\xEDa tenemos que empaquetarlo, pero antes de eso, vamos a echar un vistazo a los plugins transformadores, tambi\xE9n.</p><h2 id="diseno-de-un-plugin-transformador-ficticio" tabindex="-1"><a class="header-anchor" href="#diseno-de-un-plugin-transformador-ficticio" aria-hidden="true">#</a> Dise\xF1o de un plugin transformador ficticio</h2>`,8),$=s("Imagina que escribes un plugin que env\xEDa la "),J={href:"https://core.telegram.org/bots/api#sendchataction",target:"_blank",rel:"noopener noreferrer"},K=s("acci\xF3n de chat"),Q=s(" apropiada autom\xE1ticamente cada vez que el bot env\xEDa un documento. Esto significa que mientras tu bot est\xE1 enviando un archivo, los usuarios ver\xE1n autom\xE1ticamente \u201C"),X=n("em",null,"enviando archivo\u2026",-1),Z=s("\u201D como estado. Muy bonito, \xBFverdad?"),nn=o(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// plugin.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Transformer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./deps.deno.ts&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Funci\xF3n principal del plugin</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">autoChatAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Transformer <span class="token punctuation">{</span>
  <span class="token comment">// Crea y devuelve una funci\xF3n transformadora.</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Guarda el handle del intervalo establecido para que podamos borrarlo despu\xE9s.</span>
    <span class="token keyword">let</span> handle<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span>tipo de setTimeout<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&quot;sendDocument&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;chat_id&quot;</span> <span class="token keyword">in</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Ahora sabemos que se est\xE1 enviando un documento.</span>
      <span class="token keyword">const</span> actionPayload <span class="token operator">=</span> <span class="token punctuation">{</span>
        chat_id<span class="token operator">:</span> payload<span class="token punctuation">.</span>chat_id<span class="token punctuation">,</span>
        acci\xF3n<span class="token operator">:</span> <span class="token string">&quot;upload_document&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">// Establecer repetidamente la acci\xF3n del chat mientras se sube el archivo.</span>
      handle <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">prev</span><span class="token punctuation">(</span><span class="token string">&quot;sendChatAction&quot;</span><span class="token punctuation">,</span> actionPayload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// Ejecuta el m\xE9todo real del bot.</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">prev</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment">// Borra el intervalo para que dejemos de enviar la acci\xF3n de chat al cliente.</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ahora, podemos usarlo en un bot real:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Bot<span class="token punctuation">,</span> InputFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./deps.deno.ts&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// El c\xF3digo del plugin est\xE1 en un archivo llamado \`plugin.ts\`.</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> autoChatAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./plugin.ts&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Crear una instancia del bot.</span>
<span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- pon tu token de bot aqu\xED</span>

<span class="token comment">// Utiliza el plugin.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">autoChatAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">hears</span><span class="token punctuation">(</span><span class="token string">&quot;env\xEDame un documento&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Si el usuario env\xEDa este comando, le enviaremos un archivo pdf (a modo de demostraci\xF3n)</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">replyWithDocument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputFile</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/document.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// iniciar el bot</span>
bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ahora, cada vez que enviemos un documento, la acci\xF3n de chat de <code>upload<wbr>_document</code> ser\xE1 enviada a nuestro cliente. Ten en cuenta que esto era a modo de demostraci\xF3n. Telegram recomienda usar acciones de chat s\xF3lo cuando \u201Cuna respuesta del bot tardar\xE1 una cantidad de tiempo <strong>notable</strong> en llegar\u201D. Probablemente no sea necesario establecer el estado si el archivo es muy peque\xF1o, por lo que hay algunas optimizaciones que se podr\xEDan hacer aqu\xED.</p><h2 id="extraccion-en-un-plugin" tabindex="-1"><a class="header-anchor" href="#extraccion-en-un-plugin" aria-hidden="true">#</a> Extracci\xF3n en un plugin</h2>`,5),sn=s("Sea cual sea el tipo de plugin que hayas hecho, tienes que empaquetarlo en un paquete independiente. Esta es una tarea bastante sencilla. No hay reglas espec\xEDficas sobre c\xF3mo hacer esto y npm es su ostra, pero s\xF3lo para mantener las cosas organizadas, tenemos una sugerencia de plantilla para usted. Puedes descargar el c\xF3digo desde "),an={href:"https://github.com/grammyjs/plugin-template",target:"_blank",rel:"noopener noreferrer"},en=s("nuestro repositorio de plantillas de plugins en Git"),on=n("wbr",null,null,-1),tn=s("Hub"),pn=s(" y empezar a desarrollar tu plugin sin perder tiempo en la configuraci\xF3n."),cn=n("p",null,"La estructura de carpetas sugerida inicialmente:",-1),ln=n("div",{class:"language-asciiart ext-asciiart"},[n("pre",{class:"language-asciiart"},[n("code",null,`plugin-template/
\u251C\u2500 src/
\u2502 \u251C\u2500 deps.deno.ts
\u2502 \u251C\u2500 deps.node.ts
\u2502 \u2514\u2500 index.ts
\u251C\u2500 package.json
\u251C\u2500 tsconfig.json
\u2514\u2500 README.md
`)])],-1),rn=o("<strong><code>deps<wbr>.deno<wbr>.ts</code> y <code>deps<wbr>.node<wbr>.ts</code></strong>: Esto es para los desarrolladores que est\xE1n dispuestos a escribir el plugin para Deno, y luego transpilarlo a Node.js. Como ya hemos mencionado, utilizamos la herramienta <code>deno2node</code> para transpilar nuestro c\xF3digo Deno a Node.js. <code>deno2node</code> tiene una caracter\xEDstica que te permite proporcionarle archivos espec\xEDficos para el tiempo de ejecuci\xF3n. Estos archivos deben ser adyacentes entre s\xED y seguir la estructura de nombres <code>*<wbr>.deno<wbr>.ts</code> y <code>*<wbr>.node<wbr>.ts</code> como se ",10),un={href:"https://github.com/wojpawlik/deno2node#runtime-specific-code",target:"_blank",rel:"noopener noreferrer"},dn=s("explica en la documentaci\xF3n"),mn=o(". Por eso hay dos archivos: <code>deps<wbr>.deno<wbr>.ts</code> y <code>deps<wbr>.node<wbr>.ts</code>. Si hay alguna dependencia espec\xEDfica de Node.js, ponla en <code>deps<wbr>.node<wbr>.ts</code>, si no, d\xE9jala vac\xEDa.",7),kn=n("em",null,[n("strong",null,"Nota")],-1),gn=s(": Tambi\xE9n puede utilizar otras herramientas como "),vn={href:"https://github.com/denoland/dnt",target:"_blank",rel:"noopener noreferrer"},bn=s("deno dnt"),hn=s(" para transpilar su c\xF3digo base de deno o utilizar otras estructuras de carpetas. La herramienta que utilice es irrelevante, el punto principal aqu\xED es que escribir c\xF3digo para Deno es mejor y m\xE1s f\xE1cil."),_n=o('<p><strong><code>tsconfig<wbr>.json</code></strong>: Este es el archivo de configuraci\xF3n del compilador de TypeScript utilizado por <code>deno2node</code> para transpilar su c\xF3digo. Se proporciona uno por defecto en el repositorio como sugerencia. Se corresponde con la configuraci\xF3n de TypeScript que Deno utiliza internamente, y recomendamos que te quedes con este.</p><p><strong><code>package<wbr>.json</code></strong>: El archivo package.json para la versi\xF3n npm de su plugin. <strong>Aseg\xFArate de cambiarlo seg\xFAn tu proyecto</strong>.</p><p><strong><code>README<wbr>.md</code></strong>: Instrucciones sobre c\xF3mo utilizar el plugin. <strong>Aseg\xFArate de cambiarlo seg\xFAn tu proyecto</strong>.</p><p><strong><code>index<wbr>.ts</code></strong>: El archivo que contiene tu l\xF3gica de negocio, es decir, el c\xF3digo principal del plugin.</p><h2 id="hay-un-boilerplate" tabindex="-1"><a class="header-anchor" href="#hay-un-boilerplate" aria-hidden="true">#</a> Hay un Boilerplate</h2>',5),yn=s("Si quieres desarrollar un plugin para grammY y no sabes por d\xF3nde empezar, te sugerimos el c\xF3digo de la plantilla en "),fn={href:"https://github.com/grammyjs/plugin-template",target:"_blank",rel:"noopener noreferrer"},qn=s("nuestro repositorio"),wn=s(". Puedes clonar el c\xF3digo por ti mismo y empezar a codificar bas\xE1ndote en lo que se ha cubierto en este art\xEDculo. Este repositorio tambi\xE9n incluye algunas cosas extra como "),xn=n("code",null,".editorconfig",-1),jn=s(", "),En=n("code",null,"LICENSE",-1),zn=s(", "),An=n("code",null,".gitignore",-1),Dn=s(", etc, pero puedes optar por eliminarlas."),Nn=n("h2",{id:"no-me-gusta-deno",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#no-me-gusta-deno","aria-hidden":"true"},"#"),s(" No me gusta Deno")],-1),Cn=n("p",null,[s("Bueno, \xA1te lo pierdes! Pero tambi\xE9n puedes escribir tus plugins s\xF3lo para Node.js. Todav\xEDa puedes publicar el plugin y tenerlo listado como un plugin de terceros en este sitio web. En tal caso, puedes usar la estructura de carpetas que quieras (siempre que est\xE9 organizada como cualquier otro proyecto npm). Simplemente instala grammY a trav\xE9s de npm con "),n("code",null,"npm install grammy"),s(", y empieza a codificar.")],-1),Pn=n("h2",{id:"\xBFcomo-enviar",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\xBFcomo-enviar","aria-hidden":"true"},"#"),s(" \xBFC\xF3mo enviar?")],-1),Sn=s("Si tienes un plugin listo, puedes simplemente enviar un pull request en GitHub (de acuerdo con las "),Tn=n("a",{href:"#reglas-de-contribucion"},"Reglas de Contribuci\xF3n",-1),Yn=s("), o notificarnos en el "),In={href:"https://t.me/grammyjs",target:"_blank",rel:"noopener noreferrer"},Bn=s("chat de la comunidad"),Ln=s(" para m\xE1s ayuda.");function Mn(Hn,Rn){const t=i("RouterLink"),e=i("ExternalLinkIcon");return l(),r("div",null,[d,m,n("blockquote",null,[n("p",null,[k,a(t,{to:"/es/plugins/"},{default:p(()=>[g]),_:1}),v])]),b,h,n("ul",null,[n("li",null,[_,a(t,{to:"/es/guide/middleware.html"},{default:p(()=>[y]),_:1}),f]),n("li",null,[q,a(t,{to:"/es/advanced/transformers.html"},{default:p(()=>[w]),_:1}),x])]),j,E,z,A,n("p",null,[D,n("a",N,[C,a(e)]),P]),S,n("ol",null,[T,n("li",null,[Y,n("a",I,[B,a(e)]),L]),M]),n("p",null,[H,n("a",R,[G,a(e)]),F,n("a",V,[O,a(e)]),U]),W,n("p",null,[$,n("a",J,[K,a(e)]),Q,X,Z]),nn,n("p",null,[sn,n("a",an,[en,on,tn,a(e)]),pn]),cn,ln,n("p",null,[rn,n("a",un,[dn,a(e)]),mn]),n("blockquote",null,[n("p",null,[kn,gn,n("a",vn,[bn,a(e)]),hn])]),_n,n("p",null,[yn,n("a",fn,[qn,a(e)]),wn,xn,jn,En,zn,An,Dn]),Nn,Cn,Pn,n("p",null,[Sn,Tn,Yn,n("a",In,[Bn,a(e)]),Ln])])}const Fn=c(u,[["render",Mn],["__file","guide.html.vue"]]);export{Fn as default};
