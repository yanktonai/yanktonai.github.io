import{_ as d,r as c,o as k,c as h,b as e,w as a,a as n,d as s,e as o}from"./app.1137d7ac.js";const m={},b=n("h1",{id:"hosting-heroku",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hosting-heroku","aria-hidden":"true"},"#"),s(" Hosting: Heroku")],-1),v=n("blockquote",null,[n("p",null,[s("We assume that you have the basic knowledge about creating bots using grammY. If you are not ready yet, don\u2019t hesitate to head over to our friendly "),n("a",{href:"../guide"},"Guide"),s("! \u{1F680}")])],-1),g=s("This tutorial will guide you how to deploy a Telegram bot to "),_={href:"https://heroku.com/",target:"_blank",rel:"noopener noreferrer"},f=s("Heroku"),y=s(" by using either "),w=s("webhooks"),q=s(" or "),x=s("long polling"),T=s(". We also assume that you have a Heroku account already."),j=o(`<h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><p>First, install some dependencies:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Create a project directory.</span>
<span class="token function">mkdir</span> grammy-bot
<span class="token builtin class-name">cd</span> grammy-bot
<span class="token function">npm</span> init <span class="token parameter variable">--y</span>

<span class="token comment"># Install main dependencies.</span>
<span class="token function">npm</span> <span class="token function">install</span> grammy express

<span class="token comment"># Install development dependencies.</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> typescript @types/express @types/node

<span class="token comment"># Create TypeScript config.</span>
npx tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will store our TypeScript files inside a folder <code>src</code>, and our compiled files in a folder <code>dist</code>. Create the folders in the project\u2019s root directory. Then, inside folder <code>src</code>, create a new file named <code>bot<wbr>.ts</code>. Our folder structure should now look like this:</p><div class="language-asciiart ext-asciiart"><pre class="language-asciiart"><code>.
\u251C\u2500\u2500 node_modules/
\u251C\u2500\u2500 dist/
\u251C\u2500\u2500 src/
\u2502   \u2514\u2500\u2500 bot.ts
\u251C\u2500\u2500 package.json
\u251C\u2500\u2500 package-lock.json
\u2514\u2500\u2500 tsconfig.json
</code></pre></div><p>After that, open <code>tsconfig<wbr>.json</code> and change it to use this configuration:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNEXT&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// changed from commonjs to esnext</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ES2021&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because the <code>module</code> option above has been set from <code>commonjs</code> to <code>esnext</code>, we have to add <code>&quot;type&quot;:<wbr> &quot;module&quot;</code> to our <code>package<wbr>.json</code>. Our <code>package<wbr>.json</code> should now be similar to this:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;grammy-bot&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/app.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// add property of &quot;type&quot;: &quot;module&quot;</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev-build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;grammy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;express&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.3.5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@types/express&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.13&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@types/node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^16.3.1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),O=s("As mentioned earlier, we have two options for receiving data from Telegram: webhooks and long polling. You can learn more about the both advantages and then decide which ones is suitable in "),C=s("these awesome tips"),I=s("!"),N=n("h2",{id:"webhooks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webhooks","aria-hidden":"true"},"#"),s(" Webhooks")],-1),E=n("blockquote",null,[n("p",null,[s("If you decide to use long polling instead, you can skip this section and jump down to the "),n("a",{href:"#long-polling"},"section about long polling"),s(". \u{1F680}")])],-1),W=s("In short, unlike long polling, webhook do not run continuously for checking incoming messages from Telegram. This will reduce server load and save us a lot of "),B={href:"https://devcenter.heroku.com/articles/free-dyno-hours",target:"_blank",rel:"noopener noreferrer"},P=s("dyno hours"),H=s(", especially when you are using the free tier. \u{1F601}"),S=o(`<p>Okay, let us continue! Remember we have created <code>bot<wbr>.ts</code> earlier? We will not dump all the code there, and leave coding the bot up to you. Instead, we are going to make <code>app<wbr>.ts</code> our main entry point. That means every time Telegram (or anyone else) visits our site, <code>express</code> decides which part of your server will be responsible for handling the request. This is useful when you are deploying both website and bot in the same domain. Also, by splitting codes to different files, it make our code look tidy. \u2728</p><h3 id="express-and-its-middleware" tabindex="-1"><a class="header-anchor" href="#express-and-its-middleware" aria-hidden="true">#</a> Express and Its Middleware</h3><p>Now create <code>app<wbr>.ts</code> inside folder <code>src</code> and write this code inside:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> webhookCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./bot&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> domain <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DOMAIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secretPath <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BOT_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>secretPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token function">webhookCallback</span><span class="token punctuation">(</span>bot<span class="token punctuation">,</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Make sure it is \`https\` not \`http\`!</span>
  <span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">setWebhook</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>secretPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let\u2019s take a look at our code above:</p>`,5),F=n("code",null,[s("process"),n("wbr"),s(".env")],-1),R=s(": Remember, NEVER store credentials in our code! For creating "),G={href:"https://www.freecodecamp.org/news/using-environment-variables-the-right-way/",target:"_blank",rel:"noopener noreferrer"},L=s("environment variables"),A=s(" in Heroku, head over to "),D={href:"https://devcenter.heroku.com/articles/config-vars",target:"_blank",rel:"noopener noreferrer"},K=s("this guide"),M=s("."),U=n("code",null,[s("secret"),n("wbr"),s("Path")],-1),z=s(": It could be our "),V=n("code",null,[s("BOT"),n("wbr"),s("_TOKEN")],-1),$=s(" or any random string. It is best practice to hide our bot path as "),Y={href:"https://core.telegram.org/bots/api#setwebhook",target:"_blank",rel:"noopener noreferrer"},J=s("explained by Telegram"),X=s("."),Q={class:"custom-container tip"},Z=n("p",{class:"custom-container-title"},"\u26A1 Optimization (optional)",-1),nn=n("p",null,[n("code",null,[s("bot"),n("wbr"),s(".api"),n("wbr"),s(".set"),n("wbr"),s("Webhook")]),s(" at line 14 will always run when Heroku starts your server again. For low traffic bots, this will be for every request. However, we do not need this code to run every time a request is coming. Therefore, we can delete this part completely, and execute the "),n("code",null,"GET"),s(" only once manually. Open this link on your web browser after deploying our bot:")],-1),sn=n("div",{class:"language-asciiart ext-asciiart"},[n("pre",{class:"language-asciiart"},[n("code",null,`https://api.telegram.org/bot<bot_token>/setWebhook?url=<webhook_url>
`)])],-1),en=s("Note that some browsers require you to manually "),an={href:"https://en.wikipedia.org/wiki/Percent-encoding#Reserved_characters",target:"_blank",rel:"noopener noreferrer"},tn=s("encode"),on=o(" the <code>webhook<wbr>_url</code> before passing it. For instance, if we have bot token <code>abcd:<wbr>1234</code> and URL <code>https://<wbr>grammybot<wbr>.herokuapp<wbr>.com<wbr>/secret<wbr>_path</code>, then our link should look like this:",7),pn=n("div",{class:"language-asciiart ext-asciiart"},[n("pre",{class:"language-asciiart"},[n("code",null,`https://api.telegram.org/botabcd:1234/setWebhook?url=https%3A%2F%2Fgrammybot.herokuapp.com%2Fsecret_path
`)])],-1),cn={class:"custom-container tip"},ln=n("p",{class:"custom-container-title"},"\u26A1 Optimization (optional)",-1),rn=s("Use "),un=s("Webhook Reply"),dn=s(" for more efficiency."),kn=o(`<h3 id="creating-bot-ts" tabindex="-1"><a class="header-anchor" href="#creating-bot-ts" aria-hidden="true">#</a> Creating <code>bot<wbr>.ts</code></h3><p>Next step, head over to <code>bot<wbr>.ts</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Bot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BOT_TOKEN</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;BOT_TOKEN is missing.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BOT_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Hello there!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Got another message!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Good! We have now finished coding our main files. But before we go to the deployment steps, we can optimize our bot a little bit. As usual, this is optional.</p>`,4),hn={class:"custom-container tip"},mn=n("p",{class:"custom-container-title"},"\u26A1 Optimization (optional)",-1),bn=s("Every time your server starts up, grammY will request "),vn={href:"https://core.telegram.org/bots/api#getme",target:"_blank",rel:"noopener noreferrer"},gn=s("information about the bot"),_n=s(" from Telegram in order to provide it on the "),fn=s("context object"),yn=s(" under "),wn=n("code",null,[s("ctx"),n("wbr"),s(".me")],-1),qn=s(". We can set the "),xn={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/BotConfig#botInfo",target:"_blank",rel:"noopener noreferrer"},Tn=s("bot information"),jn=s(" to prevent excessive "),On=n("code",null,[s("get"),n("wbr"),s("Me")],-1),Cn=s(" calls."),In=s("Open this link "),Nn=n("code",null,[s("https://"),n("wbr"),s("api"),n("wbr"),s(".telegram"),n("wbr"),s(".org"),n("wbr"),s("/bot<bot"),n("wbr"),s("_token>"),n("wbr"),s("/get"),n("wbr"),s("Me")],-1),En=s(" in your favorite web browser. "),Wn={href:"https://www.mozilla.org/en-US/firefox/",target:"_blank",rel:"noopener noreferrer"},Bn=s("Firefox"),Pn=s(" is recommended since it displays "),Hn=n("code",null,"json",-1),Sn=s(" format nicely."),Fn=n("li",null,[s("Change our code at line 4 above and fill the value according to the results from "),n("code",null,[s("get"),n("wbr"),s("Me")]),s(":")],-1),Rn=o(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BOT_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  botInfo<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">111111111</span><span class="token punctuation">,</span>
    is_bot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    first_name<span class="token operator">:</span> <span class="token string">&quot;xxxxxxxxx&quot;</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> <span class="token string">&quot;xxxxxxbot&quot;</span><span class="token punctuation">,</span>
    can_join_groups<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    can_read_all_group_messages<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    supports_inline_queries<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Gn=n("p",null,[s("Cool! It\u2019s time to prepare our deployment environment! Straight to "),n("a",{href:"#deployment"},"Deployment Section"),s(" everyone! \u{1F4AA}")],-1),Ln=n("h2",{id:"long-polling",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#long-polling","aria-hidden":"true"},"#"),s(" Long Polling")],-1),An={class:"custom-container warning"},Dn=n("p",{class:"custom-container-title"},"Your Script Will Run Continuously When Using Long Polling",-1),Kn=s("Unless you know how to handle this behavior, make sure you have enough "),Mn={href:"https://devcenter.heroku.com/articles/free-dyno-hours",target:"_blank",rel:"noopener noreferrer"},Un=s("dyno hours"),zn=s("."),Vn=o(`<blockquote><p>Consider using webhooks? Jump up to the <a href="#webhooks">webhooks section</a>. \u{1F680}</p></blockquote><p>Using long polling on your server is not always a bad idea. Sometimes, it is suitable for data gathering bots that don\u2019t need to respond quickly and handle lots of data. If you want to do this once an hour, you can do that easily. That\u2019s something you cannot control with webhooks. If your bot gets flooded with messages, you will see a lot of webhooks requests, however, you can more easily limit the rate of updates to process with long polling.</p><h3 id="creating-bot-ts-1" tabindex="-1"><a class="header-anchor" href="#creating-bot-ts-1" aria-hidden="true">#</a> Creating <code>bot<wbr>.ts</code></h3><p>Let\u2019s open the <code>bot<wbr>.ts</code> file that we have created earlier. Have it contain these lines of code:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Bot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BOT_TOKEN</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;BOT_TOKEN is missing.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BOT_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>
  <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m running on Heroku using long polling!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),$n=s("That\u2019s it! We are ready to deploy it. Pretty simple, right? \u{1F603} If you think it is too easy, check out our "),Yn=s("Deployment Checklist"),Jn=s("! \u{1F680}"),Xn=o(`<h2 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment" aria-hidden="true">#</a> Deployment</h2><p>Nope\u2026 our <em>Rocket Bot</em> is not ready to launch yet. Complete these stages first!</p><h3 id="compile-files" tabindex="-1"><a class="header-anchor" href="#compile-files" aria-hidden="true">#</a> Compile Files</h3><p>Run this code in your terminal to compile the TypeScript files to JavaScript:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If it runs successfully and does not print any errors, our compiled files should be in the <code>dist</code> folder with <code>.js</code> extensions.</p><h3 id="set-up-procfile" tabindex="-1"><a class="header-anchor" href="#set-up-procfile" aria-hidden="true">#</a> Set up <code>Procfile</code></h3>`,7),Qn=s("For the time being, "),Zn=n("code",null,"Heroku",-1),ns=s(" has several "),ss={href:"https://devcenter.heroku.com/articles/free-dyno-hours",target:"_blank",rel:"noopener noreferrer"},es=s("types of dynos"),as=s(". Two of them are:"),ts=o(`<ul><li><p><strong>Web dynos</strong>: <br> <em>Web dynos</em> are dynos of the \u201Cweb\u201D process that receive HTTP traffic from routers. This kind of dyno has a timeout of 30 seconds for executing code. Also, it will sleep if there is no request to handle within a 30 minutes period. This type of dyno is quite suitable for <em>webhooks</em>.</p></li><li><p><strong>Worker dynos</strong>: <br> <em>Worker dynos</em> are typically used for background jobs. It does NOT have a timeout, and will NOT sleep if it does not handle any web requests. It fits <em>long polling</em>.</p></li></ul><p>Create file named <code>Procfile</code> without a file extension in the root directory of our project. For example, <code>Procfile<wbr>.txt</code> and <code>procfile</code> are not valid. Then write this single line code format:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dynos type&gt;: &lt;command for executing our main entry file&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For our case it should be:</p>`,4),os=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`web: node dist/app.js
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),ps=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`worker: node dist/bot.js
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),is=n("h3",{id:"set-up-git",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#set-up-git","aria-hidden":"true"},"#"),s(" Set up Git")],-1),cs=s("We are going to deploy our bot using "),ls={href:"https://devcenter.heroku.com/articles/git",target:"_blank",rel:"noopener noreferrer"},rs=s("Git and Heroku Cli"),us=s(". Here is the link for the installation:"),ds={href:"https://git-scm.com/download/",target:"_blank",rel:"noopener noreferrer"},ks=s("Git installation instructions"),hs={href:"https://devcenter.heroku.com/articles/heroku-cli#download-and-install",target:"_blank",rel:"noopener noreferrer"},ms=s("Heroku CLI installation instructions"),bs=o(`<p>Assuming that you already have them in your machine, and you have a terminal open in the root of our project\u2019s directory. Now initialize a local git repository by running this code in your terminal:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Next, we need to prevent unnecessary files from reaching our production server, in this case <code>Heroku</code>. Create a file named <code>.gitignore</code> in root of our project\u2019s directory. Then add this list:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node_modules/
src/
tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our final folder structure should now look like this:</p>`,5),vs=n("div",{class:"language-asciiart ext-asciiart"},[n("pre",{class:"language-asciiart"},[n("code",null,`.
\u251C\u2500\u2500 .git/
\u251C\u2500\u2500 node_modules/
\u251C\u2500\u2500 dist/
\u2502   \u251C\u2500\u2500 bot.js
\u2502   \u2514\u2500\u2500 app.js
\u251C\u2500\u2500 src/
\u2502   \u251C\u2500\u2500 bot.ts
\u2502   \u2514\u2500\u2500 app.ts
\u251C\u2500\u2500 package.json
\u251C\u2500\u2500 package-lock.json
\u251C\u2500\u2500 tsconfig.json
\u251C\u2500\u2500 Procfile
\u2514\u2500\u2500 .gitignore
`)])],-1),gs=n("div",{class:"language-asciiart ext-asciiart"},[n("pre",{class:"language-asciiart"},[n("code",null,`.
\u251C\u2500\u2500 .git/
\u251C\u2500\u2500 node_modules/
\u251C\u2500\u2500 dist/
\u2502   \u2514\u2500\u2500 bot.js
\u251C\u2500\u2500 src/
\u2502   \u2514\u2500\u2500 bot.ts
\u251C\u2500\u2500 package.json
\u251C\u2500\u2500 package-lock.json
\u251C\u2500\u2500 tsconfig.json
\u251C\u2500\u2500 Procfile
\u2514\u2500\u2500 .gitignore
`)])],-1),_s=o(`<p>Commit files to our git repository:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;My first commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-up-a-heroku-remote" tabindex="-1"><a class="header-anchor" href="#set-up-a-heroku-remote" aria-hidden="true">#</a> Set Up a Heroku Remote</h3>`,3),fs=s("If you have already created "),ys={href:"https://dashboard.heroku.com/apps/",target:"_blank",rel:"noopener noreferrer"},ws=s("Heroku app"),qs=s(", pass your "),xs=n("code",null,"Existing app",-1),Ts=s("\u2019s name in "),js=n("code",null,[s("<my"),n("wbr"),s("App>")],-1),Os=s(" below, then run the code. Otherwise, run "),Cs=n("code",null,"New app",-1),Is=s("."),Ns=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[s(`heroku create
`),n("span",{class:"token function"},"git"),s(" remote "),n("span",{class:"token parameter variable"},"-v"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Es=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[s("heroku git:remote "),n("span",{class:"token parameter variable"},"-a"),s(),n("span",{class:"token operator"},"<"),s("myApp"),n("span",{class:"token operator"},">"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),Ws=o(`<h3 id="deploying-code" tabindex="-1"><a class="header-anchor" href="#deploying-code" aria-hidden="true">#</a> Deploying Code</h3><p>Finally, press the <em>red button</em> and liftoff! \u{1F680}</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push heroku main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If it doesn\u2019t work, it\u2019s probably our git branch is not <code>main</code> but <code>master</code>. Press this <em>blue button</em> instead:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push heroku master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function Bs(Ps,Hs){const r=c("Tag"),u=c("TagGroup"),t=c("ExternalLinkIcon"),p=c("RouterLink"),i=c("CodeGroupItem"),l=c("CodeGroup");return k(),h("div",null,[b,e(u,null,{default:a(()=>[e(r,{type:"deno",desc:"This setup is able to run Deno bots"}),e(r,{type:"nodejs",desc:"This setup is able to run Node.js bots"})]),_:1}),v,n("p",null,[g,n("a",_,[f,e(t)]),y,e(p,{to:"/guide/deployment-types.html#how-to-use-webhooks"},{default:a(()=>[w]),_:1}),q,e(p,{to:"/guide/deployment-types.html#how-to-use-long-polling"},{default:a(()=>[x]),_:1}),T]),j,n("p",null,[O,e(p,{to:"/guide/deployment-types.html"},{default:a(()=>[C]),_:1}),I]),N,E,n("p",null,[W,n("a",B,[P,e(t)]),H]),S,n("ul",null,[n("li",null,[F,R,n("a",G,[L,e(t)]),A,n("a",D,[K,e(t)]),M]),n("li",null,[U,z,V,$,n("a",Y,[J,e(t)]),X])]),n("div",Q,[Z,nn,sn,n("p",null,[en,n("a",an,[tn,e(t)]),on]),pn]),n("div",cn,[ln,n("p",null,[rn,e(p,{to:"/guide/deployment-types.html#webhook-reply"},{default:a(()=>[un]),_:1}),dn])]),kn,n("div",hn,[mn,n("p",null,[bn,n("a",vn,[gn,e(t)]),_n,e(p,{to:"/guide/context.html"},{default:a(()=>[fn]),_:1}),yn,wn,qn,n("a",xn,[Tn,e(t)]),jn,On,Cn]),n("ol",null,[n("li",null,[In,Nn,En,n("a",Wn,[Bn,e(t)]),Pn,Hn,Sn]),Fn]),Rn]),Gn,Ln,n("div",An,[Dn,n("p",null,[Kn,n("a",Mn,[Un,e(t)]),zn])]),Vn,n("p",null,[$n,e(p,{to:"/advanced/deployment.html#long-polling"},{default:a(()=>[Yn]),_:1}),Jn]),Xn,n("p",null,[Qn,Zn,ns,n("a",ss,[es,e(t)]),as]),ts,e(l,null,{default:a(()=>[e(i,{title:"Webhook",active:""},{default:a(()=>[os]),_:1}),e(i,{title:"Long Polling"},{default:a(()=>[ps]),_:1})]),_:1}),is,n("p",null,[cs,n("a",ls,[rs,e(t)]),us]),n("ul",null,[n("li",null,[n("a",ds,[ks,e(t)])]),n("li",null,[n("a",hs,[ms,e(t)])])]),bs,e(l,null,{default:a(()=>[e(i,{title:"Webhook",active:""},{default:a(()=>[vs]),_:1}),e(i,{title:"Long Polling"},{default:a(()=>[gs]),_:1})]),_:1}),_s,n("p",null,[fs,n("a",ys,[ws,e(t)]),qs,xs,Ts,js,Os,Cs,Is]),e(l,null,{default:a(()=>[e(i,{title:"New app",active:""},{default:a(()=>[Ns]),_:1}),e(i,{title:"Existing app",active:""},{default:a(()=>[Es]),_:1})]),_:1}),Ws])}const Fs=d(m,[["render",Bs],["__file","heroku.html.vue"]]);export{Fs as default};
