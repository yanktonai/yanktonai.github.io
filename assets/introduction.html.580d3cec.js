import{_ as l,r as i,o as d,c as h,a as t,b as o,w as r,d as e,e as a}from"./app.ff0cf306.js";const c={},u=t("h1",{id:"introduction",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),e(" Introduction")],-1),_=t("p",null,"A Telegram bot is a special user account that is automated by a program. Anyone can create a Telegram bot, the only prerequisite is that you know a little bit of coding.",-1),p=e("If you already know how create bots, head over to "),m=e("Getting Started"),y=e("!"),g=t("p",null,"grammY is a library that makes it super simple to write such a bot.",-1),f=t("h2",{id:"how-to-write-a-bot",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#how-to-write-a-bot","aria-hidden":"true"},"#"),e(" How to Write a Bot")],-1),w=e("Before you begin creating your bot, make yourself familiar with what Telegram bots can and cannot do. Check out the "),b={href:"https://core.telegram.org/bots",target:"_blank",rel:"noopener noreferrer"},k=e("Introduction for Developers"),v=e(" by the Telegram team."),T=a(`<p>In making your Telegram bot, you will create a text file with the source code of your bot. (You can also copy one of our example files.) It defines <em>what your bot actually does</em>, i.e. \u201Cwhen a user sends this message, respond with that\u201D, and so on.</p><p>You can then run that source file. Your bot will now work, until you stop running it.</p><p>You\u2019re kinda done now\u2026</p><h2 id="how-to-keep-a-bot-running" tabindex="-1"><a class="header-anchor" href="#how-to-keep-a-bot-running" aria-hidden="true">#</a> How to Keep a Bot Running</h2><p>\u2026except, if you are serious about your bot project. If you stop your bot (or shut down your computer), your bot becomes unresponsive, so it will no longer react to any messages.</p><blockquote><p>Skip this section if you only want to play around with bots, and <a href="#prerequisites-to-getting-started">continue down here with the prerequisites</a> to getting started.</p></blockquote><p>Simply put, if you want the bot to be online all the time, you have to keep a computer running 24 hours every day. Because you most likely don\u2019t want to do that with your laptop, you should upload your code to a <em>hosting provider</em> (in other words, someone else\u2019s computer, also known as a <em>server</em>), and let those people run it for you.</p><p>There are countless companies that let you run your Telegram bot for free. This documentation covers a number of different hosting providers that we know work well with grammY (check the Hosting section). In the end, however, the choice of which provider to pick is up to you. Remember that running your code somewhere else means that whoever owns that \u201Csomewhere\u201D has access to all your messages and the data of your users, so you should pick a provider that you can trust.</p><p>Here is a (simplified) diagram of how the setup will look in the end when Alice contacts your bot:</p><div class="language-asciiart ext-asciiart"><pre class="language-asciiart"><code>_________        sends a         ____________                    ____________
| Alice | \u2014&gt; Telegram message \u2014&gt; | Telegram | \u2014&gt; HTTP request \u2014&gt; | your bot |
\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014      to your bot       \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014                    \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014

 a phone                        Telegram servers                  your laptop,
                                                                better: a server


|____________________________________________|                   |___________|
                    |                                                  |
        Telegram&#39;s responsibility                             your responsibility
</code></pre></div><p>Similarly, your bot can make HTTP requests to the Telegram servers to send messages back to Alice. (If you have never heard of HTTP, you can think of it as the data packages that are sent through the internet, for now.)</p><h2 id="what-grammy-does-for-you" tabindex="-1"><a class="header-anchor" href="#what-grammy-does-for-you" aria-hidden="true">#</a> What grammY Does for You</h2><p>Bots interact with Telegram via HTTP requests. Every time your bot sends or receives messages, HTTP requests go back and forth between the Telegram servers and your server/computer.</p><p>At its core, grammY implements all of this communication for you, so you can simply type <code>send<wbr>Message</code> in your code and a message will be sent. In addition, there are a variety of other helpful things that grammY does to make it simpler to create your bot. You will get to know them as you go.</p><h2 id="prerequisites-to-getting-started" tabindex="-1"><a class="header-anchor" href="#prerequisites-to-getting-started" aria-hidden="true">#</a> Prerequisites to Getting Started</h2>`,15),j=e("Skip the rest of this page if you already know how to develop a Deno or a Node.js application, and "),x=e("get started"),q=e("."),I=t("p",null,"Here are a few interesting things about programming\u2014things that are essential to coding, yet rarely explained because most developers think they are self-evident.",-1),N=e("In the next section, you will create a bot by writing a text file that contains source code in the programming language "),S={href:"https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html",target:"_blank",rel:"noopener noreferrer"},Y=e("Type"),D=t("wbr",null,null,-1),H=e("Script"),C=e(". The grammY documentation will not teach you how to program, so we expect you to teach yourself. Remember, though: creating a Telegram bot with grammY is actually a good way to learn coding! \u{1F680}"),B={class:"custom-container tip"},A=t("p",{class:"custom-container-title"},"Learning How to Code",-1),P=e("You can start learning TypeScript with the "),R={href:"https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html",target:"_blank",rel:"noopener noreferrer"},E=e("official tutorial"),G=e(" written by the TypeScript team, and then move on from there. Don\u2019t spend more than 30 minutes reading things on the internet, then come back here, (read the rest of the section) and "),L=e("get started"),V=e("."),W=t("p",null,"If you see unfamiliar syntax in the docs, or if you get an error message that you don\u2019t understand, google it\u2014the explanation is already on the internet (e.g. on StackOverflow).",-1),F={class:"custom-container danger"},M=t("p",{class:"custom-container-title"},"Not Learning How to Code",-1),O=e("Save yourself some time by watching "),z={href:"https://youtu.be/8RtGlWmXGhA",target:"_blank",rel:"noopener noreferrer"},J=e("this 34 second long video"),K=e("."),X=t("p",null,[e("By picking grammY, you have already decided on a programming language, namely TypeScript. But what happens once you\u2019ve created your TypeScript code, how will it start running? For that, you need to install some software which is able to "),t("em",null,"execute"),e(" your code. This type of software is called a "),t("em",null,"runtime environment"),e(". It takes in your source code files and actually does whatever is programmed in them.")],-1),Q=e("For us, there are two runtime environments to choose from, "),U={href:"https://deno.land",target:"_blank",rel:"noopener noreferrer"},Z=e("Deno"),$=e(" and "),ee={href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"},te=e("Node"),oe=t("wbr",null,null,-1),ne=e(".js"),se=e(". (If you see people call it "),re=t("em",null,"Node",-1),ae=e(", they are just too lazy to type \u201C.js\u201D, but they mean the same thing.)"),ie=a('<blockquote><p>The rest of this section helps you decide between these two platforms. If you already know what you want to use, jump down to the <a href="#prerequisites-for-node-js">prerequisites for Node<wbr>.js</a> or <a href="#prerequisites-for-deno">those for Deno</a>.</p></blockquote><p>Node.js is the older, more mature technology. If you need to connect to a funky database or do other low-level system-related things, chances are extremely high that you can do it with Node.js. Deno is relatively new, so it is sometimes still lacking support for some advanced things. Today, most servers use Node.js.</p><p>On the other hand side, Deno is significantly easier to learn and to use. If you don\u2019t have much experience with programming yet, <strong>it makes sense to start with Deno</strong>.</p><p>Even if you have written code for Node.js before, you should consider giving Deno a go. Many things that are hard under Node.js are a no-brainer under Deno. It has</p><ul><li>no <code>package<wbr>.json</code> file to configure,</li><li>no <code>node<wbr>_modules</code> to maintain,</li><li>superior, built-in development tools,</li><li>substantially better security, and</li><li>many more advantages that do not fit here.</li></ul><p>Developing code under Deno is also a lot more fun. At least, that\u2019s our opinion.</p><p>However, if you have a reason to use Node.js, for example because you already know it well, then that is completely fine! We are making sure that grammY works equally well on both platforms, and we are not cutting any corners. Please choose what you think is best for you.</p><h3 id="prerequisites-for-deno" tabindex="-1"><a class="header-anchor" href="#prerequisites-for-deno" aria-hidden="true">#</a> Prerequisites for Deno</h3>',8),le={href:"https://deno.land/#installation",target:"_blank",rel:"noopener noreferrer"},de=e("Install Deno"),he=e(" if you have not done that already. When you have created your bot, for example in a file called "),ce=t("code",null,[e("bot"),t("wbr"),e(".ts")],-1),ue=e(", you can run it via "),_e=t("code",null,[e("deno run "),t("wbr"),e("--allow"),t("wbr"),e("-net bot"),t("wbr"),e(".ts")],-1),pe=e(". You can stop it again with "),me=t("code",null,"Ctrl+C",-1),ye=e("."),ge=e("Ready? "),fe=e("Get started"),we=e("! \u{1F916}"),be=a('<h3 id="prerequisites-for-node-js" tabindex="-1"><a class="header-anchor" href="#prerequisites-for-node-js" aria-hidden="true">#</a> Prerequisites for Node.js</h3><p>You are going to write your bot in TypeScript, but, contrary to Deno, Node.js cannot actually run TypeScript. Instead, once you have a source file (e.g. called <code>bot<wbr>.ts</code>), you are going to <em>compile</em> it to JavaScript. You will then have two files: your original <code>bot<wbr>.ts</code>, and a generated <code>bot<wbr>.js</code>, which can in turn be run by Node.js. The exact commands for all of that will be introduced in the next section when you actually create a bot, but it is important to know that these steps are necessary.</p>',2),ke=e("In order to run the "),ve=t("code",null,[e("bot"),t("wbr"),e(".js")],-1),Te=e(" file, you have to have "),je={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},xe=e("Node"),qe=t("wbr",null,null,-1),Ie=e(".js"),Ne=e(" installed."),Se=t("p",null,"In summary, this is what you have to do for Node.js:",-1),Ye=e("Create a source file "),De=t("code",null,[e("bot"),t("wbr"),e(".ts")],-1),He=e(" with TypeScript code, e.g. using "),Ce={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},Be=e("VSCode"),Ae=e(" (or any other code editor)."),Pe=t("li",null,[e("Compile the code by running a command in your terminal. This generates a file called "),t("code",null,[e("bot"),t("wbr"),e(".js")]),e(".")],-1),Re=t("li",null,[e("Run "),t("code",null,[e("bot"),t("wbr"),e(".js")]),e(" using Node.js, again from your terminal.")],-1),Ee=t("p",null,[e("Every time you modify your code in "),t("code",null,[e("bot"),t("wbr"),e(".ts")]),e(", you need to restart the Node.js process. Hit "),t("code",null,"Ctrl+C"),e(" in your terminal to stop the process. This will stop your bot. Then, you need to repeat steps 2 and 3.")],-1),Ge=e("Are you ready? "),Le=e("Get started"),Ve=e("! \u{1F916}");function We(Fe,Me){const s=i("RouterLink"),n=i("ExternalLinkIcon");return d(),h("div",null,[u,_,t("blockquote",null,[t("p",null,[p,o(s,{to:"/guide/getting-started.html"},{default:r(()=>[m]),_:1}),y])]),g,f,t("p",null,[w,t("a",b,[k,o(n)]),v]),T,t("blockquote",null,[t("p",null,[j,o(s,{to:"/guide/getting-started.html"},{default:r(()=>[x]),_:1}),q])]),I,t("p",null,[N,t("a",S,[Y,D,H,o(n)]),C]),t("div",B,[A,t("p",null,[P,t("a",R,[E,o(n)]),G,o(s,{to:"/guide/getting-started.html"},{default:r(()=>[L]),_:1}),V]),W]),t("div",F,[M,t("p",null,[O,t("a",z,[J,o(n)]),K])]),X,t("p",null,[Q,t("a",U,[Z,o(n)]),$,t("a",ee,[te,oe,ne,o(n)]),se,re,ae]),ie,t("p",null,[t("a",le,[de,o(n)]),he,ce,ue,_e,pe,me,ye]),t("p",null,[ge,o(s,{to:"/guide/getting-started.html#getting-started-on-deno"},{default:r(()=>[fe]),_:1}),we]),be,t("p",null,[ke,ve,Te,t("a",je,[xe,qe,Ie,o(n)]),Ne]),Se,t("ol",null,[t("li",null,[Ye,De,He,t("a",Ce,[Be,o(n)]),Ae]),Pe,Re]),Ee,t("p",null,[Ge,o(s,{to:"/guide/getting-started.html#getting-started-on-node-js"},{default:r(()=>[Le]),_:1}),Ve])])}const ze=l(c,[["render",We],["__file","introduction.html.vue"]]);export{ze as default};
