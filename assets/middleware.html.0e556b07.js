import{_ as i,r as p,o as u,c as l,a,b as s,w as o,d as n,e}from"./app.c0ce12a9.js";const d={},k=a("h1",{id:"membangkitkan-middleware",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#membangkitkan-middleware","aria-hidden":"true"},"#"),n(" Membangkitkan Middleware")],-1),m=n("Di "),r=n("bab sebelumnya"),b=n(", kami telah menjelaskan middleware sebagai lapisan-lapisan function yang saling bertumpukan. Meski tidak sepenuhnya salah, namun menyebutnya sebagai \u201Ctumpukan\u201D atau "),g=a("em",null,"stack",-1),h=n(" hanyalah penyederhanaan supaya mudah dipahami."),v=e(`<h2 id="middleware-di-grammy" tabindex="-1"><a class="header-anchor" href="#middleware-di-grammy" aria-hidden="true">#</a> Middleware di grammY</h2><p>Umumnya, kamu akan menemui pola seperti ini.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;token&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=n("Memang mirip seperti tumpukan, tetapi di balik layar mereka sebenarnya lebih mirip seperti cabang pohon. Komponen utama pembentuk pohon ini adalah class "),f=a("code",null,"Composer",-1),_=n(" ("),w={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Composer",target:"_blank",rel:"noopener noreferrer"},C=n("referensi"),x=n(")."),j=a("p",null,[n("Pertama-tama, setiap instance "),a("code",null,"Bot"),n(" adalah instance dari "),a("code",null,"Composer"),n(". Ia hanyalah sebuah subclass. Oleh karena itu "),a("code",null,"class Bot extends Composer"),n(".")],-1),A=e("Kamu juga harus tahu bahwa setiap method <code>Composer</code> di dalamnya memanggil <code>use</code>. Sebagai contoh, <code>filter</code> memanggil <code>use</code> dengan beberapa percabangan middleware, sementara <code>on</code> memanggil <code>filter</code> lagi dengan beberapa <em>predicate function</em> yang terdapat kecocokan antara update dan ",15),B=n("filter query"),q=n(" yang diberikan. Untuk saat ini, kita cukupkan pembahasan mengenai "),M=a("code",null,"use",-1),D=n(" dan lanjut ke pembahasan berikutnya."),L=e(`<p>Kita akan mengupas sedikit mengenai apa yang dilakukan <code>Composer</code> terhadap pemanggilan <code>use</code>, dan apa bedanya dengan sistem middleware lain di luar sana. Perbedaannya mungkin tidak begitu mencolok, tetapi tunggu hingga kita membahas mengenai manfaat luar biasa yang dihasilkannya.</p><h2 id="memperbanyak-composer" tabindex="-1"><a class="header-anchor" href="#memperbanyak-composer" aria-hidden="true">#</a> Memperbanyak <code>Composer</code></h2><p>Kamu bisa memasang lebih banyak middleware di instance <code>Composer</code>, bahkan setelah memasang <code>Composer</code> itu sendiri di tempat lain.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;token&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// subclass dari \`Composer\`</span>

<span class="token keyword">const</span> composer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>composer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Berikut akan dijalankan:</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* A */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* B */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* C */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>A</code>, <code>B</code>, dan <code>C</code> akan dijalankan. Yang dimaksud di sini adalah setelah kamu menambahkan sebuah instance <code>Composer</code>, kamu masih bisa memanggil <code>use</code> pada instance tersebut dan semua middleware-nya akan tetap dijalankan. (Ini bukan sesuatu yang istimewa, tetapi sudah menjadi sebuah pembeda utama dari framework populer sejenis yang mengabaikan pemanggilan berikutnya).</p><p>Kamu mungkin bertanya-tanya dimana struktur pohonnya. Mari kita lihat potongan kode berikut:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> composer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* A */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* B */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* C */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* D */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* E */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* F */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* G */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* H */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* I */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
composer<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* J */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* K */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* L */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sudah terlihat?</p><p>Yup, semua middleware tersebut akan dijalankan secara berurutan dari <code>A</code> ke <code>L</code>.</p><p>Library lain akan menjalankan kode dengan cara <code>composer<wbr>.use(<wbr>/* A *<wbr>/)<wbr>.use(<wbr>/* B *<wbr>/)<wbr>.use(<wbr>/* C *<wbr>/)<wbr>.use(<wbr>/* D *<wbr>/)<wbr>..<wbr>.</code> dan seterusnya. Sebaliknya, grammY menggunakan struktur pohon: satu simpul akar (<code>composer</code>) memiliki lima cabang (<code>A</code>, <code>B</code>, <code>D</code>, <code>H</code>, <code>J</code>), sementara cabang dari <code>B</code> memiliki satu anak cabang, yaitu <code>C</code>, dan seterusnya. Pohon ini kemudian akan dilalui oleh setiap update sesuai urutan kedalamannya, yang sama efektifnya dengan melewati <code>A</code> ke <code>L</code> secara berurutan, mirip yang kita kenal di sistem lain.</p><p>Proses ini memungkinkan untuk membuat instance baru dari <code>Composer</code> setiap kali kamu memanggil <code>use</code>, yang kemudian akan di-extend (seperti yang sudah diterangkan di atas).</p><h2 id="menggabungkan-pemanggilan-use" tabindex="-1"><a class="header-anchor" href="#menggabungkan-pemanggilan-use" aria-hidden="true">#</a> Menggabungkan Pemanggilan <code>use</code></h2><p>Kalau kita hanya menggunakan satu <code>use</code>, itu tidak akan terlalu bag-<em>use</em> \u2014 <em>maaf, garing</em> \u{1F62C}. Akan semakin menarik ketika kita menambahkan sesuatu ke dalamnya, misal <code>filter</code>.</p><p>Lihat kode berikut:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> composer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

composer<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* 1 */</span><span class="token punctuation">,</span> <span class="token comment">/* A */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* B */</span><span class="token punctuation">)</span>

composer<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* 2 */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* C */</span><span class="token punctuation">,</span> <span class="token comment">/* D */</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Di baris 3, kita menambahkan <code>A</code> di belakang <em>predicate function</em> <code>1</code>. <code>A</code> akan dievaluasi untuk update hanya jika kondisi <code>1</code> terpenuhi. Meski begitu, <code>filter</code> mengembalikan instance <code>Composer</code> yang telah kita tambahkan dengan pemanggilan <code>use</code> di baris 3, sehingga <code>B</code> masih terproteksi oleh <code>1</code>, meskipun ia dipasang di pemanggilan <code>use</code> yang berbeda.</p><p>Baris 5 sama halnya dengan baris 3, <code>C</code> dan <code>D</code> hanya akan dijalankan jika kondisi <code>2</code> terpenuhi.</p><p>Masih ingat bagaimana pemanggilan <code>bot<wbr>.on()</code> bisa dirangkai untuk menggabungkan beberapa <em>filter query</em> menggunakan AND? Sekarang, bayangkan ini:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> composer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

composer<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* 1 */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* 2 */</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* A */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>2</code> hanya akan dievaluasi jika <code>1</code> terpenuhi, dan <code>A</code> hanya akan dijalankan jika <code>2</code> (serta <code>1</code>) terpenuhi.</p>`,20),K=n("Coba kunjungi kembali materi mengenai "),I=n("pengombinasian filter query"),N=n(" dengan pengetahuan dan kekuatan barumu."),P=e("<p>Khusus <code>fork</code> sedikit berbeda karena ia memulai dua komputasi secara bersamaan, misal disisipkan ke <em>event loop</em>. Alih-alih mengembalikan instance <code>Composer</code> yang dibuat oleh pemanggilan <code>use</code>, ia mengembalikan sebuah <code>Composer</code> yang merefleksikan komputasi percabangan. Dengan begitu akan memungkinkan untuk membuat pola seperti <code>bot<wbr>.fork()<wbr>.on(&quot;:<wbr>text&quot;)<wbr>.use(<wbr>/* A *<wbr>/)</code>. <code>A</code> sekarang akan dieksekusi di percabangan komputasi paralel.</p>",1);function S(E,V){const t=p("RouterLink"),c=p("ExternalLinkIcon");return u(),l("div",null,[k,a("p",null,[m,s(t,{to:"/id/guide/middleware.html"},{default:o(()=>[r]),_:1}),b,g,h]),v,a("p",null,[y,f,_,a("a",w,[C,s(c)]),x]),j,a("p",null,[A,s(t,{to:"/id/guide/filter-queries.html"},{default:o(()=>[B]),_:1}),q,M,D]),L,a("p",null,[K,s(t,{to:"/id/guide/filter-queries.html#mengombinasikan-beberapa-query"},{default:o(()=>[I]),_:1}),N]),P])}const H=i(d,[["render",S],["__file","middleware.html.vue"]]);export{H as default};
