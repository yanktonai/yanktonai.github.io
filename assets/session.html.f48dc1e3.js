import{_ as u,r as l,o as r,c as d,a as n,b as a,w as t,e as c,d as s}from"./app.1137d7ac.js";const k={},m=c('<h1 id="sessions-and-storing-data-built-in" tabindex="-1"><a class="header-anchor" href="#sessions-and-storing-data-built-in" aria-hidden="true">#</a> Sessions and Storing Data (built-in)</h1><p>While you can always just write you own code to connect to a data storage of your choice, grammY supports a very convenient storage pattern called <em>sessions</em>.</p><blockquote><p><a href="#how-to-use-sessions">Jump down</a> if you know how sessions work.</p></blockquote><h2 id="why-must-we-think-about-storage" tabindex="-1"><a class="header-anchor" href="#why-must-we-think-about-storage" aria-hidden="true">#</a> Why Must We Think About Storage?</h2>',4),h=s("In opposite to regular user accounts on Telegram, bots have "),b={href:"https://core.telegram.org/bots#4-how-are-bots-different-from-humans",target:"_blank",rel:"noopener noreferrer"},g=s("limited cloud storage"),v=s(" in the Telegram cloud. As a result, there are a few things you cannot do with bots:"),y=c(`<ol><li>You cannot access old messages that your bot received.</li><li>You cannot access old messages that your bot sent.</li><li>You cannot get a list of all chats with your bot.</li><li>More things, e.g. no media overview, etc</li></ol><p>Basically, it boils down to the fact that <strong>a bot only has access to the information of the currently incoming update</strong> (e.g. message), i.e. the information that is available on the context object <code>ctx</code>.</p><p>Consequently, if you <em>do want to access</em> old data, you have to store it as soon as it arrives. This means that you must have a data storage, such as a file, a database, or an in-memory storage.</p><p>Of course, grammY has you covered here: you don\u2019t have to host this yourself. You can just use the grammY session storage which needs zero setup and is free forever.</p><blockquote><p>Naturally, there are plenty of other services that offer data storage as a service, and grammY integrates seamlessly with them, too. If you want to run your own database, rest assured that grammY supports this equally well. <a href="#known-storage-adapters">Scroll down</a> to see which integrations are currently available.</p></blockquote><h2 id="what-are-sessions" tabindex="-1"><a class="header-anchor" href="#what-are-sessions" aria-hidden="true">#</a> What Are Sessions?</h2><p>It is a very common thing for bots to store some piece of data per chat. For example, let\u2019s say we want to build a bot that counts the number of times that a message contains the pizza emoji \u{1F355} in its text. This bot could be added to a group, and it can tell you how much you and your friends like pizza.</p><p>When our pizza bot receives a message, it has to remember how many times it saw a \u{1F355} in that chat before. Your pizza count should of course not change when your sister adds the pizza bot to her group chat, so what we really want is to store <em>one counter per chat</em>.</p><p>Sessions are an elegant way to store data <em>per chat</em>. You would use the chat identifier as the key in your database, and a counter as the value. In this case, we would call the chat identifier the <em>session key</em>. (You can read more about session keys <a href="#session-keys">down here</a>.) Effectively, your bot will store a map from a chat identifier to some custom session data, i.e. something like this:</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;424242&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;pizzaCount&quot;</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;987654&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;pizzaCount&quot;</span><span class="token operator">:</span> <span class="token number">1729</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>When we say database, we really mean any data storage solution. This includes files, cloud storage, or anything else.</p></blockquote><p>Okay, but what are sessions now?</p><p>We can install middleware on the bot that will provide a chat\u2019s session data on <code>ctx<wbr>.session</code> for every update. The installed plugin will do something before and after our handlers are called:</p><ol><li><strong>Before our middleware.</strong> The session plugin loads the session data for the current chat from the database. It stores the data on the context object under <code>ctx<wbr>.session</code>.</li><li><strong>Our middleware runs.</strong> We can <em>read</em> <code>ctx<wbr>.session</code> to inspect which value was in the database. For example, if a message is sent to the chat with the identifier <code>424242</code>, it would be <code>ctx<wbr>.session <wbr>=<wbr> { pizza<wbr>Count:<wbr> 24 }</code> while our middleware runs (at least with the example database state above). We can also <em>modify</em> <code>ctx<wbr>.session</code> arbitrarily, so we can add, remove, and change fields as we like.</li><li><strong>After our middleware.</strong> The session middleware makes sure that the data is written back to the database. Whatever the value of <code>ctx<wbr>.session</code> is after the middleware is done executing, it will be saved in the database.</li></ol><p>As a result, we never have to worry about actually communicating with the data storage anymore. We just modify the data in <code>ctx<wbr>.session</code>, and the plugin will take care of the rest.</p><h2 id="when-to-use-sessions" tabindex="-1"><a class="header-anchor" href="#when-to-use-sessions" aria-hidden="true">#</a> When to Use Sessions</h2><blockquote><p><a href="#how-to-use-sessions">Skip ahead</a> if you already know that you want to use sessions.</p></blockquote><p>You may think, this is great, I never have to worry about databases again! And you are right, sessions are an ideal solution\u2014but only for some types of data.</p><p>In our experience, there are use cases where sessions truly shine. On the other hand, there are cases where a traditional database may be better suited.</p><p>This comparison may help you decide whether to use sessions or not.</p><table><thead><tr><th></th><th>Sessions</th><th>Database</th></tr></thead><tbody><tr><td><em>Access</em></td><td>one isolated storage <strong>per chat</strong></td><td>access same data from <strong>multiple chats</strong></td></tr><tr><td><em>Sharing</em></td><td>data is <strong>only used by bot</strong></td><td>data is <strong>used by other systems</strong> (e.g. by a connected web server)</td></tr><tr><td><em>Format</em></td><td>any JavaScript objects: strings, numbers, arrays, and so on</td><td>any data (binary, files, structured, etc)</td></tr><tr><td><em>Size per chat</em></td><td>preferably less than ~3 MB per chat</td><td>any size</td></tr><tr><td><em>Exclusive feature</em></td><td>Required by some grammY plugins.</td><td>Supports database transactions.</td></tr></tbody></table><p>This does not mean that things <em>cannot work</em> if you pick sessions/databases over the other. For example, you can of course store large binary data in your session. However, your bot would not perform as well as it could otherwise, so we recommend using sessions only where they make sense.</p><h2 id="how-to-use-sessions" tabindex="-1"><a class="header-anchor" href="#how-to-use-sessions" aria-hidden="true">#</a> How to Use Sessions</h2><p>You can add session support to grammY by using the built-in session middleware.</p><h3 id="example-usage" tabindex="-1"><a class="header-anchor" href="#example-usage" aria-hidden="true">#</a> Example Usage</h3><p>Here is an example bot that counts messages containing a pizza emoji \u{1F355}:</p>`,26),_=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" Context"),n("span",{class:"token punctuation"},","),s(" session"),n("span",{class:"token punctuation"},","),s(" SessionFlavor "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define the shape of our session."),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"SessionData"),s(),n("span",{class:"token punctuation"},"{"),s(`
  pizzaCount`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Flavor the context type to include sessions."),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token operator"},"="),s(" Context "),n("span",{class:"token operator"},"&"),s(" SessionFlavor"),n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("Bot"),n("span",{class:"token operator"},"<"),s("MyContext"),n("span",{class:"token operator"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Install session middleware, and define the initial session value."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"initial"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" SessionData "),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(" pizzaCount"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" initial "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hunger"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" count "),n("span",{class:"token operator"},"="),s(" ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("pizzaCount"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Your hunger level is "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("count"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"!"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hears"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},".*\u{1F355}.*"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("pizzaCount"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" session "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Install session middleware, and define the initial session value."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"initial"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"pizzaCount"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" initial "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hunger"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" count "),n("span",{class:"token operator"},"="),s(" ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("pizzaCount"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Your hunger level is "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("count"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"!"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hears"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},".*\u{1F355}.*"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("pizzaCount"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(`
  Bot`),n("span",{class:"token punctuation"},","),s(`
  Context`),n("span",{class:"token punctuation"},","),s(`
  session`),n("span",{class:"token punctuation"},","),s(`
  SessionFlavor`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy@v1.11.1/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define shape of our session."),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"SessionData"),s(),n("span",{class:"token punctuation"},"{"),s(`
  pizzaCount`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Flavor the context type to include sessions."),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token operator"},"="),s(" Context "),n("span",{class:"token operator"},"&"),s(" SessionFlavor"),n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("Bot"),n("span",{class:"token operator"},"<"),s("MyContext"),n("span",{class:"token operator"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Install session middleware, and define the initial session value."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"initial"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" SessionData "),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(" pizzaCount"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" initial "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hunger"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" count "),n("span",{class:"token operator"},"="),s(" ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("pizzaCount"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Your hunger level is "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("count"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"!"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hears"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},".*\u{1F355}.*"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("pizzaCount"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=s("Note how we also have to "),S=s("adjust the context type"),j=s(" to make the session available on it. The context flavor is called "),z=n("code",null,[s("Session"),n("wbr"),s("Flavor")],-1),T=s("."),C=c(`<h3 id="initial-session-data" tabindex="-1"><a class="header-anchor" href="#initial-session-data" aria-hidden="true">#</a> Initial Session Data</h3><p>When a user first contacts your bot, no session data is available for them. It is therefore important that you specify the <code>initial</code> option for the session middleware. Pass a function that generates a new object with initial session data for new chats.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Creates a new object that will be used as initial session data.</span>
<span class="token keyword">function</span> <span class="token function">createInitialSessionData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    pizzaCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token comment">// more data here</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span> initial<span class="token operator">:</span> createInitialSessionData <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Same but much shorter:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">initial</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> pizzaCount<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Sharing Objects</p><p>Make sure to always create a <em>new object</em>. Do <strong>NOT</strong> do this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// DANGER, BAD, WRONG, STOP</span>
<span class="token keyword">const</span> initialData <span class="token operator">=</span> <span class="token punctuation">{</span> pizzaCount<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// NOPE</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">initial</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> initialData <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// EVIL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would do this, several chats might share the same session object in memory. Hence, changing the session data in one chat may accidentally impact the session data in the other chat.</p></div><p>You may also omit the <code>initial</code> option entirely, even though you are well advised not to do that. If you don\u2019t specify it, reading <code>ctx<wbr>.session</code> will throw an error for new users.</p><h3 id="session-keys" tabindex="-1"><a class="header-anchor" href="#session-keys" aria-hidden="true">#</a> Session Keys</h3><blockquote><p>This section describes an advanced feature that most people do not have to worry about. You may want to continue with the section about <a href="#storing-your-data">storing your data</a>.</p></blockquote>`,9),q=s("You can specify which session key to use by passing a function called "),D=n("code",null,[s("get"),n("wbr"),s("Session"),n("wbr"),s("Key")],-1),Y=s(" to the "),I={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/SessionOptions#getSessionKey",target:"_blank",rel:"noopener noreferrer"},B=s("options"),F=s(". That way, you can fundamentally change the way how the session plugin works. By default, data is stored per chat. Using "),M=n("code",null,[s("get"),n("wbr"),s("Session"),n("wbr"),s("Key")],-1),N=s(" allows you to store data per user, or per user-chat combination, or however you want. Here are three examples:"),A=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// Stores data per chat (default)."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSessionKey"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token operator"},":"),s(" Context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"undefined"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Let all users in a group chat share the same session,"),s(`
  `),n("span",{class:"token comment"},"// but give an independent private one to each user in private chats"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("chat"),n("span",{class:"token operator"},"?."),s("id"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Stores data per user."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSessionKey"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token operator"},":"),s(" Context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"undefined"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Give every user their personal session storage"),s(`
  `),n("span",{class:"token comment"},"// (will be shared across groups and in their private chat)"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("from"),n("span",{class:"token operator"},"?."),s("id"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Stores data per user-chat combination."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSessionKey"),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token operator"},":"),s(" Context"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"undefined"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Give every user their one personal session storage per chat with the bot"),s(`
  `),n("span",{class:"token comment"},"// (an independent session for each group and their private chat)"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("from "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"undefined"),s(),n("span",{class:"token operator"},"||"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("chat "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"undefined"),s(`
    `),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token keyword"},"undefined"),s(`
    `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("from"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"/"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("chat"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" getSessionKey "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// Stores data per chat (default)."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSessionKey"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Let all users in a group chat share the same session,"),s(`
  `),n("span",{class:"token comment"},"// but give an independent private one to each user in private chats"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("chat"),n("span",{class:"token operator"},"?."),s("id"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Stores data per user."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSessionKey"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Give every user their personal session storage"),s(`
  `),n("span",{class:"token comment"},"// (will be shared across groups and in their private chat)"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("from"),n("span",{class:"token operator"},"?."),s("id"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// Stores data per user-chat combination."),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getSessionKey"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Give every user their one personal session storage per chat with the bot"),s(`
  `),n("span",{class:"token comment"},"// (an independent session for each group and their private chat)"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("from "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"undefined"),s(),n("span",{class:"token operator"},"||"),s(" ctx"),n("span",{class:"token punctuation"},"."),s("chat "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token keyword"},"undefined"),s(`
    `),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token keyword"},"undefined"),s(`
    `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("from"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"/"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("chat"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" getSessionKey "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=c("<p>Whenever <code>get<wbr>Session<wbr>Key</code> returns <code>undefined</code>, <code>ctx<wbr>.session</code> will be <code>undefined</code>. For example, the default session key resolver will not work for <code>poll</code>/<code>poll<wbr>_answer</code> updates or <code>inline<wbr>_query</code> updates because they do not belong to a chat (<code>ctx<wbr>.chat</code> is <code>undefined</code>).</p>",1),L={class:"custom-container warning"},K=n("p",{class:"custom-container-title"},"Session Keys and Webhooks",-1),E=n("p",null,[s("When you are running your bot on webhooks, you should avoid using the option "),n("code",null,[s("get"),n("wbr"),s("Session"),n("wbr"),s("Key")]),s(". Telegram sends webhooks sequentially per chat, so the default session key resolver is the only implementation that guarantees not to cause data loss.")],-1),O=s("If you must use the option (which is of course still possible), you should know what you are doing. Make sure you understand the consequences of this configuration by reading "),U=s("this"),R=s(" article and especially "),G=s("this"),$=s(" one."),H=c(`<h3 id="storing-your-data" tabindex="-1"><a class="header-anchor" href="#storing-your-data" aria-hidden="true">#</a> Storing Your Data</h3><p>In all examples above, the session data is stored in your RAM, so as soon as your bot is stopped, all data is lost. This is convenient when you develop your bot or if you run automatic tests (no database setup needed), however, <strong>that is most likely not desired in production</strong>. In production, you would want to persist your data, for example in a file, a database, or some other storage.</p><p>You should use the <code>storage</code> option of the session middleware to connect it to your datastore. There may already be a storage adapter written for grammY that you can use (see <a href="#known-storage-adapters">below</a>), but if not, it usually only takes 5 lines of code to implement one yourself.</p><h2 id="known-storage-adapters" tabindex="-1"><a class="header-anchor" href="#known-storage-adapters" aria-hidden="true">#</a> Known Storage Adapters</h2><p>By default, sessions will be stored <a href="#ram-default">in your memory</a> by the built-in storage adapter. You can also use persistent sessions that grammY <a href="#free-storage">offers for free</a>, or connect to <a href="#external-storage-solutions">external storages</a>.</p><p>This is how you can install one of the storage adapters from below.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> storageAdapter <span class="token operator">=</span> <span class="token operator">...</span> <span class="token comment">// depends on setup</span>

bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  initial<span class="token operator">:</span> <span class="token operator">...</span>
  storage<span class="token operator">:</span> storageAdapter<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ram-default" tabindex="-1"><a class="header-anchor" href="#ram-default" aria-hidden="true">#</a> RAM (default)</h3><p>By default, all data will be stored in RAM. This means that all sessions are lost as soon as your bot stops.</p>`,9),J=s("You can use the "),V=n("code",null,[s("Memory"),n("wbr"),s("Session"),n("wbr"),s("Storage")],-1),Q=s(" class ("),X={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/MemorySessionStorage",target:"_blank",rel:"noopener noreferrer"},Z=s("API Reference"),nn=s(") from the grammY core package if you want to configure further things about storing data in RAM."),sn=c(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  initial<span class="token operator">:</span> <span class="token operator">...</span>
  storage<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">MemorySessionStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// also the default value</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="free-storage" tabindex="-1"><a class="header-anchor" href="#free-storage" aria-hidden="true">#</a> Free Storage</h3><blockquote><p>The free storage is meant to be used in hobby projects. Production-scale applications should host their own database. The list of supported integrations of external storage solutions is <a href="#external-storage-solutions">down here</a>.</p></blockquote>`,3),an=s("A benefit of using grammY is that you get access to free cloud storage. It requires zero setup\u2014all authentication is done using your bot token. Check out the "),tn={href:"https://github.com/grammyjs/storages/tree/main/packages/free",target:"_blank",rel:"noopener noreferrer"},en=s("repository"),on=s("!"),cn=n("p",null,"It is very easy to use:",-1),pn=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" freeStorage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"@grammyjs/storage-free"'),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  initial`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token operator"},"..."),s(`
  storage`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"freeStorage"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("bot"),n("span",{class:"token punctuation"},"."),s("token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ln=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" freeStorage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"@grammyjs/storage-free"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  initial`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token operator"},"..."),s(`
  storage`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"freeStorage"),n("span",{class:"token punctuation"},"("),s("bot"),n("span",{class:"token punctuation"},"."),s("token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" freeStorage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy_storages@v2.0.1/free/src/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  initial`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token operator"},"..."),s(`
  storage`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"freeStorage"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("bot"),n("span",{class:"token punctuation"},"."),s("token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=n("p",null,"Done! Your bot will now use a persistent data storage.",-1),dn=n("p",null,"Here is a full example bot that you can copy to try it out.",-1),kn=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" Context"),n("span",{class:"token punctuation"},","),s(" session"),n("span",{class:"token punctuation"},","),s(" SessionFlavor "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" freeStorage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"@grammyjs/storage-free"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define the session structure."),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"SessionData"),s(),n("span",{class:"token punctuation"},"{"),s(`
  count`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token operator"},"="),s(" Context "),n("span",{class:"token operator"},"&"),s(" SessionFlavor"),n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create the bot and register the session middleware."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("Bot"),n("span",{class:"token operator"},"<"),s("MyContext"),n("span",{class:"token operator"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// <-- put your bot token between the ""'),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"initial"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" count"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
  storage`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"freeStorage"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("bot"),n("span",{class:"token punctuation"},"."),s("token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Use persistent session data in update handlers."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  ctx`),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Message count: "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),mn=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot"),n("span",{class:"token punctuation"},","),s(" session "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" freeStorage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"@grammyjs/storage-free"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create the bot and register the session middleware."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// <-- put your bot token between the ""'),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"initial"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" count"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
  storage`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"freeStorage"),n("span",{class:"token punctuation"},"("),s("bot"),n("span",{class:"token punctuation"},"."),s("token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Use persistent session data in update handlers."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  ctx`),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Message count: "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hn=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(`
  Bot`),n("span",{class:"token punctuation"},","),s(`
  Context`),n("span",{class:"token punctuation"},","),s(`
  session`),n("span",{class:"token punctuation"},","),s(`
  SessionFlavor`),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy@v1.11.1/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" freeStorage "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy_storages@v2.0.1/free/src/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Define the session structure."),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"SessionData"),s(),n("span",{class:"token punctuation"},"{"),s(`
  count`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"MyContext"),s(),n("span",{class:"token operator"},"="),s(" Context "),n("span",{class:"token operator"},"&"),s(" SessionFlavor"),n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create the bot and register the session middleware."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},[s("Bot"),n("span",{class:"token operator"},"<"),s("MyContext"),n("span",{class:"token operator"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// <-- put your bot token between the ""'),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"session"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"initial"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" count"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
  storage`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"freeStorage"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("SessionData"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("bot"),n("span",{class:"token punctuation"},"."),s("token"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Use persistent session data in update handlers."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"on"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  ctx`),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Message count: "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("ctx"),n("span",{class:"token punctuation"},"."),s("session"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),bn=n("h3",{id:"external-storage-solutions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#external-storage-solutions","aria-hidden":"true"},"#"),s(" External Storage Solutions")],-1),gn=n("p",null,"We maintain a list of official storage adapters that allow you to store your session data in different places. Each of them will require you to register at a hosting provider, or to host your own storage solution.",-1),vn=s("Supabase: "),yn={href:"https://github.com/grammyjs/storages/tree/main/packages/supabase",target:"_blank",rel:"noopener noreferrer"},_n=s("https://"),fn=n("wbr",null,null,-1),wn=s("github"),xn=n("wbr",null,null,-1),Sn=s(".com"),jn=n("wbr",null,null,-1),zn=s("/grammyjs"),Tn=n("wbr",null,null,-1),Cn=s("/storages"),qn=n("wbr",null,null,-1),Dn=s("/tree"),Yn=n("wbr",null,null,-1),In=s("/main"),Bn=n("wbr",null,null,-1),Fn=s("/packages"),Mn=n("wbr",null,null,-1),Nn=s("/supabase"),An=s("Deta.sh Base: "),Wn={href:"https://github.com/grammyjs/storages/tree/main/packages/deta",target:"_blank",rel:"noopener noreferrer"},Pn=s("https://"),Ln=n("wbr",null,null,-1),Kn=s("github"),En=n("wbr",null,null,-1),On=s(".com"),Un=n("wbr",null,null,-1),Rn=s("/grammyjs"),Gn=n("wbr",null,null,-1),$n=s("/storages"),Hn=n("wbr",null,null,-1),Jn=s("/tree"),Vn=n("wbr",null,null,-1),Qn=s("/main"),Xn=n("wbr",null,null,-1),Zn=s("/packages"),ns=n("wbr",null,null,-1),ss=s("/deta"),as=s("Google Firestore (Node.js-only): "),ts={href:"https://github.com/grammyjs/storages/tree/main/packages/firestore",target:"_blank",rel:"noopener noreferrer"},es=s("https://"),os=n("wbr",null,null,-1),cs=s("github"),is=n("wbr",null,null,-1),ps=s(".com"),ls=n("wbr",null,null,-1),us=s("/grammyjs"),rs=n("wbr",null,null,-1),ds=s("/storages"),ks=n("wbr",null,null,-1),ms=s("/tree"),hs=n("wbr",null,null,-1),bs=s("/main"),gs=n("wbr",null,null,-1),vs=s("/packages"),ys=n("wbr",null,null,-1),_s=s("/firestore"),fs=s("Files: "),ws={href:"https://github.com/grammyjs/storages/tree/main/packages/file",target:"_blank",rel:"noopener noreferrer"},xs=s("https://"),Ss=n("wbr",null,null,-1),js=s("github"),zs=n("wbr",null,null,-1),Ts=s(".com"),Cs=n("wbr",null,null,-1),qs=s("/grammyjs"),Ds=n("wbr",null,null,-1),Ys=s("/storages"),Is=n("wbr",null,null,-1),Bs=s("/tree"),Fs=n("wbr",null,null,-1),Ms=s("/main"),Ns=n("wbr",null,null,-1),As=s("/packages"),Ws=n("wbr",null,null,-1),Ps=s("/file"),Ls=s("MongoDB: "),Ks={href:"https://github.com/grammyjs/storages/tree/main/packages/mongodb",target:"_blank",rel:"noopener noreferrer"},Es=s("https://"),Os=n("wbr",null,null,-1),Us=s("github"),Rs=n("wbr",null,null,-1),Gs=s(".com"),$s=n("wbr",null,null,-1),Hs=s("/grammyjs"),Js=n("wbr",null,null,-1),Vs=s("/storages"),Qs=n("wbr",null,null,-1),Xs=s("/tree"),Zs=n("wbr",null,null,-1),na=s("/main"),sa=n("wbr",null,null,-1),aa=s("/packages"),ta=n("wbr",null,null,-1),ea=s("/mongodb"),oa=s("Redis: "),ca={href:"https://github.com/grammyjs/storages/tree/main/packages/redis",target:"_blank",rel:"noopener noreferrer"},ia=s("https://"),pa=n("wbr",null,null,-1),la=s("github"),ua=n("wbr",null,null,-1),ra=s(".com"),da=n("wbr",null,null,-1),ka=s("/grammyjs"),ma=n("wbr",null,null,-1),ha=s("/storages"),ba=n("wbr",null,null,-1),ga=s("/tree"),va=n("wbr",null,null,-1),ya=s("/main"),_a=n("wbr",null,null,-1),fa=s("/packages"),wa=n("wbr",null,null,-1),xa=s("/redis"),Sa=s("PostgreSQL: "),ja={href:"https://github.com/grammyjs/storages/tree/main/packages/psql",target:"_blank",rel:"noopener noreferrer"},za=s("https://"),Ta=n("wbr",null,null,-1),Ca=s("github"),qa=n("wbr",null,null,-1),Da=s(".com"),Ya=n("wbr",null,null,-1),Ia=s("/grammyjs"),Ba=n("wbr",null,null,-1),Fa=s("/storages"),Ma=n("wbr",null,null,-1),Na=s("/tree"),Aa=n("wbr",null,null,-1),Wa=s("/main"),Pa=n("wbr",null,null,-1),La=s("/packages"),Ka=n("wbr",null,null,-1),Ea=s("/psql"),Oa=s("TypeORM (Node.js-only): "),Ua={href:"https://github.com/grammyjs/storages/tree/main/packages/typeorm",target:"_blank",rel:"noopener noreferrer"},Ra=s("https://"),Ga=n("wbr",null,null,-1),$a=s("github"),Ha=n("wbr",null,null,-1),Ja=s(".com"),Va=n("wbr",null,null,-1),Qa=s("/grammyjs"),Xa=n("wbr",null,null,-1),Za=s("/storages"),nt=n("wbr",null,null,-1),st=s("/tree"),at=n("wbr",null,null,-1),tt=s("/main"),et=n("wbr",null,null,-1),ot=s("/packages"),ct=n("wbr",null,null,-1),it=s("/typeorm"),pt=s("DenoDB (Deno-only): "),lt={href:"https://github.com/grammyjs/storages/tree/main/packages/denodb",target:"_blank",rel:"noopener noreferrer"},ut=s("https://"),rt=n("wbr",null,null,-1),dt=s("github"),kt=n("wbr",null,null,-1),mt=s(".com"),ht=n("wbr",null,null,-1),bt=s("/grammyjs"),gt=n("wbr",null,null,-1),vt=s("/storages"),yt=n("wbr",null,null,-1),_t=s("/tree"),ft=n("wbr",null,null,-1),wt=s("/main"),xt=n("wbr",null,null,-1),St=s("/packages"),jt=n("wbr",null,null,-1),zt=s("/denodb"),Tt=s("Prisma (Node.js-only): "),Ct={href:"https://github.com/grammyjs/storages/tree/main/packages/prisma",target:"_blank",rel:"noopener noreferrer"},qt=s("https://"),Dt=n("wbr",null,null,-1),Yt=s("github"),It=n("wbr",null,null,-1),Bt=s(".com"),Ft=n("wbr",null,null,-1),Mt=s("/grammyjs"),Nt=n("wbr",null,null,-1),At=s("/storages"),Wt=n("wbr",null,null,-1),Pt=s("/tree"),Lt=n("wbr",null,null,-1),Kt=s("/main"),Et=n("wbr",null,null,-1),Ot=s("/packages"),Ut=n("wbr",null,null,-1),Rt=s("/prisma"),Gt={class:"custom-container tip"},$t=n("p",{class:"custom-container-title"},"Your storage is not supported? No problem!",-1),Ht=s("Creating a custom storage adapter is extremely simple. The "),Jt=n("code",null,"storage",-1),Vt=s(" option works with any object that adheres to "),Qt={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/StorageAdapter",target:"_blank",rel:"noopener noreferrer"},Xt=s("this interface"),Zt=s(", so you can connect to your storage just in a few lines of code."),ne=n("blockquote",null,[n("p",null,"If you published your own storage adapter, feel free to edit this page and link it here, so that other people can use it.")],-1),se=c('<p>All storage adapters can be installed in the same way. First, you should look out for the package name of the adapter of your choice. For example, the storage adapter for Supabase is called <code>supabase</code>.</p><p><strong>On Node.js</strong>, you can install the adapters via <code>npm i @grammyjs<wbr>/storage<wbr>-&lt;name&gt;</code>. For example, the storage adapter for Supabase can be installed via <code>npm i @grammyjs<wbr>/storage<wbr>-supabase</code>.</p><p><strong>On Deno</strong>, all storage adapters are published in the same Deno module. You can then import the adapter you need from its subpath at <code>https://<wbr>deno<wbr>.land<wbr>/x<wbr>/grammy<wbr>_storages<wbr>/&lt;adapter&gt;<wbr>/src<wbr>/mod<wbr>.ts</code>. For example, the storage adapter for Supabase can be imported from <code>https://<wbr>deno<wbr>.land<wbr>/x<wbr>/grammy<wbr>_storages<wbr>/supabase<wbr>/src<wbr>/mod<wbr>.ts</code>.</p><p>Check out the respective repositories about each individual setup. They contain information about how to connect them to your storage solution.</p><p>You may also want to <a href="#storage-enhancements">scroll down</a> to see how the session plugin is able to enhance any storage adapter.</p><h2 id="multi-sessions" tabindex="-1"><a class="header-anchor" href="#multi-sessions" aria-hidden="true">#</a> Multi Sessions</h2><p>The session plugin is able to store different fragments of your session data in different places. Basically, this works as if you would install multiple independent instances of the the session plugin, each with a different configuration.</p><p>Each of these data fragments will have a name under which they can store their data. You will then be able to access <code>ctx<wbr>.session<wbr>.foo</code> and <code>ctx<wbr>.session<wbr>.bar</code> and these values were loaded from different data storages, and they will also be written back to different data storages. Naturally, you can also use the same storage with different configuration.</p><p>It is also possible to use different <a href="#session-keys">session keys</a> for each fragment. As a result, you can store some data per chat and some data per user.</p>',9),ae=s("If you are using "),te=s("grammY runner"),ee=s(", make sure to configure "),oe=n("code",null,"sequentialize",-1),ce=s(" correctly by returning "),ie=n("strong",null,"all",-1),pe=s(" session keys as constraints from the function."),le=c(`<p>You can use this feature by passing <code>type:<wbr> &quot;multi&quot;</code> to the session configuration. In turn, you will need to configure each fragment with its own config.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;multi&quot;</span><span class="token punctuation">,</span>
  foo<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// there are also the default values</span>
    storage<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">MemorySessionStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">initial</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getSessionKey</span><span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>from<span class="token operator">?.</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  bar<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">initial</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> prop<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    storage<span class="token operator">:</span> <span class="token function">freeStorage</span><span class="token punctuation">(</span>bot<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  baz<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that you must add a configuration entry for every fragment you want to use. If you wish to use the default configuration, you can specify an empty object (such as we do for <code>baz</code> in the above example).</p><p>Your session data will still consist of an object with multiple properties. This is why your context flavor does not change. The above example could use this interface when customizing the context object:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SessionData</span> <span class="token punctuation">{</span>
  foo<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  bar<span class="token operator">:</span> <span class="token punctuation">{</span> prop<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  baz<span class="token operator">:</span> <span class="token punctuation">{</span> width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can then keep using <code>Session<wbr>Flavor&lt;Session<wbr>Data&gt;</code> for your context object.</p><h2 id="lazy-sessions" tabindex="-1"><a class="header-anchor" href="#lazy-sessions" aria-hidden="true">#</a> Lazy Sessions</h2><blockquote><p>This section describes a performance optimization that most people do not have to worry about.</p></blockquote><p>Lazy sessions is an alternative implementation of sessions that can significantly reduce the database traffic of your bot by skipping superfluous read and write operations.</p><p>Let\u2019s assume that your bot is in a group chat where it does not respond to regular text messages, but only to commands. Without sessions, this would happen:</p><ol><li>Update with new text message is sent to your bot.</li><li>No handler is invoked, so no action is taken.</li><li>The middleware completes immediately.</li></ol><p>As soon as you install default (strict) sessions, which directly provide the session data on the context object, this happens:</p><ol><li>Update with new text message is sent to your bot.</li><li>Session data is loaded from session storage (e.g. database).</li><li>No handler is invoked, so no action is taken.</li><li>Identical session data is written back to session storage.</li><li>The middleware completes, and has performed a read and a write to the data storage.</li></ol><p>Depending on the nature of your bot, this may lead to a lot of superfluous reads and writes. Lazy sessions allow you to skip steps 2. and 4. if it turns out that no invoked handler needs session data. In that case, no data will be read from the data storage, nor written back to it.</p><p>This is achieved by intercepting access to <code>ctx<wbr>.session</code>. If no handler is invoked, then <code>ctx<wbr>.session</code> will never be accessed. Lazy sessions use this as an indicator to prevent database communication.</p><p>In practice, instead of having the session data available under <code>ctx<wbr>.session</code>, you will now have <em>a promise of the session data</em> available under <code>ctx<wbr>.session</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Default sessions (strict sessions)</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;settings&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`session\` is the session data</span>
  <span class="token keyword">const</span> session <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Lazy sessions</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;settings&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`promise\` is a Promise of the session data, and</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">;</span>
  <span class="token comment">// \`session\` is the session data</span>
  <span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you never access <code>ctx<wbr>.session</code>, no operations will be performed, but as soon as you access the <code>session</code> property on the context object, the read operation will be triggered. If you never trigger the read (or directly assign a new value to <code>ctx<wbr>.session</code>), we know that we also won\u2019t need to write any data back, because there is no way it could have been altered. Consequently, we skip the write operation, too. As a result, we achieve minimal read and write operations, but you can use session almost identical to before, just with a few <code>async</code> and <code>await</code> keywords mixed into your code.</p><p>So what is necessary to use lazy sessions instead of the default (strict) ones? You mainly have to do three things:</p><ol><li>Flavor your context with <code>Lazy<wbr>Session<wbr>Flavor</code> instead of <code>Session<wbr>Flavor</code>. They work the same way, just that <code>ctx<wbr>.session</code> is wrapped inside a promise for the lazy variant.</li><li>Use <code>lazy<wbr>Session</code> instead of <code>session</code> to register your session middleware.</li><li>Always put an inline <code>await ctx<wbr>.session</code> instead of <code>ctx<wbr>.session</code> everywhere in your middleware, for both reads and writes. Don\u2019t worry: You can <code>await</code> the promise with your session data as many times as you want, but you will always refer to the same value, so there are never going to be duplicate reads for an update.</li></ol><p>Note that with lazy sessions you can assign both objects and promises of objects to <code>ctx<wbr>.session</code>. If you set <code>ctx<wbr>.session</code> to be a promise, it will be <code>await</code>ed before writing the data back to the data storage. This would allow for the following code:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;reset&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Much shorter than having to \`await ctx.session\` first:</span>
  ctx<span class="token punctuation">.</span>session <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    stats<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One may argue well that explicitly using <code>await</code> is preferable over assigning a promise to <code>ctx<wbr>.session</code>, the point is that you <em>could</em> do this if you like that style better for some reason.</p><div class="custom-container tip"><p class="custom-container-title">Plugins That Need Sessions</p><p>Plugin developers that make use of <code>ctx<wbr>.session</code> should always allow users to pass <code>Session<wbr>Flavor | Lazy<wbr>Session<wbr>Flavor</code> and hence support both modes. In the plugin code, simply await <code>ctx<wbr>.session</code> all the time: if a non-promise object is passed, this will simply be evaluated to itself, so you effectively only write code for lazy sessions and thus support strict sessions automatically.</p></div><h2 id="storage-enhancements" tabindex="-1"><a class="header-anchor" href="#storage-enhancements" aria-hidden="true">#</a> Storage Enhancements</h2><p>The session plugin is able to enhance any storage adapter by adding more features to the storage: <a href="#timeouts">timeouts</a> and <a href="#migrations">migrations</a>.</p><p>They can be installed using the <code>enhance<wbr>Storage</code> function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Create a storage adapter.</span>
<span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token function">freeStorage</span><span class="token punctuation">(</span>bot<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// adjust this</span>
<span class="token comment">// Enhance the storage adapter.</span>
<span class="token keyword">const</span> enhanced <span class="token operator">=</span> <span class="token function">enhanceStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  storage<span class="token punctuation">,</span>
  <span class="token comment">// more config here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Use the enhanced storage adapter.</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span> storage<span class="token operator">:</span> enhanced <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use both at the same time.</p><h3 id="timeouts" tabindex="-1"><a class="header-anchor" href="#timeouts" aria-hidden="true">#</a> Timeouts</h3><p>The timeouts enhancement can add an expiry date to the session data. This means that you can specify a time period, and if the session is never changed during this time, the data for the particular chat will be deleted.</p><p>You can use session timeouts via the <code>milliseconds<wbr>ToLive</code> option.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> enhanced <span class="token operator">=</span> <span class="token function">enhanceStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  storage<span class="token punctuation">,</span>
  millisecondsToLive<span class="token operator">:</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 30 min</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the actual deletion of the data will only happen the next time the respective session data is read.</p><h3 id="migrations" tabindex="-1"><a class="header-anchor" href="#migrations" aria-hidden="true">#</a> Migrations</h3><p>Migrations are useful if you develop your bot further while there is already existing session data. You can use them if you want to change your session data without breaking all previous data.</p><p>This works by giving version numbers to the data, and then writing small migration functions. The migration functions define how to upgrade session data from one version to the next.</p><p>We will try to illustrate this by example. Let\u2019s say that you stored information about the pet of a user. So far, you only stored the names of the pets in a string array in <code>ctx<wbr>.session<wbr>.pet<wbr>Names</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SessionData</span> <span class="token punctuation">{</span>
  petNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you get the idea that you also want to store the age of the pets.</p><p>You could do this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SessionData</span> <span class="token punctuation">{</span>
  petNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  petBirthdays<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This would not break your existing session data. However, this is not so great, because the names and the birthdays are now stored in different places. Ideally, your session data should look like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  birthday<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">SessionData</span> <span class="token punctuation">{</span>
  pets<span class="token operator">:</span> Pet<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Migration functions let you transform the old string array into the new array of pet objects.</p>`,45),ue=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"addBirthdayToPets"),n("span",{class:"token punctuation"},"("),s("old"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" petNames"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" SessionData "),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
    pets`),n("span",{class:"token operator"},":"),s(" old"),n("span",{class:"token punctuation"},"."),s("petNames"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" name "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(" enhanced "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"enhanceStorage"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  storage`),n("span",{class:"token punctuation"},","),s(`
  migrations`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),s(" addBirthdayToPets"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),re=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"addBirthdayToPets"),n("span",{class:"token punctuation"},"("),s("old"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
    pets`),n("span",{class:"token operator"},":"),s(" old"),n("span",{class:"token punctuation"},"."),s("petNames"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" name "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(" enhanced "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"enhanceStorage"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  storage`),n("span",{class:"token punctuation"},","),s(`
  migrations`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),s(" addBirthdayToPets"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),de=c(`<p>Whenever session data is read, the storage enhancement will check if the session data is already at version <code>1</code>. If the version is lower (or missing because you were not using this feature before) then the migration function will be run. This upgrades the data to version <code>1</code>. Hence, in your bot, you can always just assume that your session data has the most up to date structure, and the storage enhancement will take care of the rest and migrate your data as necessary.</p><p>As time evolves and your bot changes further, you can add more and more migration functions:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> enhanced <span class="token operator">=</span> <span class="token function">enhanceStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  storage<span class="token punctuation">,</span>
  migrations<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">:</span> addBirthdayToPets<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> addIsFavoriteFlagToPets<span class="token punctuation">,</span>
    <span class="token number">3</span><span class="token operator">:</span> addUserSettings<span class="token punctuation">,</span>
    <span class="token number">10</span><span class="token operator">:</span> extendUserSettings<span class="token punctuation">,</span>
    <span class="token number">10.1</span><span class="token operator">:</span> fixUserSettings<span class="token punctuation">,</span>
    <span class="token number">11</span><span class="token operator">:</span> compressData<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can pick any JavaScript numbers as versions. No matter how far the session data for a chat has evolved, as soon as it is read, it will be migrated through the versions until it uses the most recent structure.</p><h2 id="plugin-summary" tabindex="-1"><a class="header-anchor" href="#plugin-summary" aria-hidden="true">#</a> Plugin Summary</h2><p>This plugin is built-in into the core of grammY. You don\u2019t need to install anything to use it. Simply import everything from grammY itself.</p><p>Also, both the documentation and the API reference of this plugin are unified with the core package.</p>`,7);function ke(me,he){const e=l("ExternalLinkIcon"),o=l("CodeGroupItem"),i=l("CodeGroup"),p=l("RouterLink");return r(),d("div",null,[m,n("p",null,[h,n("a",b,[g,a(e)]),v]),y,a(i,null,{default:t(()=>[a(o,{title:"TypeScript",active:""},{default:t(()=>[_]),_:1}),a(o,{title:"JavaScript"},{default:t(()=>[f]),_:1}),a(o,{title:"Deno"},{default:t(()=>[w]),_:1})]),_:1}),n("p",null,[x,a(p,{to:"/guide/context.html#customizing-the-context-object"},{default:t(()=>[S]),_:1}),j,z,T]),C,n("p",null,[q,D,Y,n("a",I,[B,a(e)]),F,M,N]),a(i,null,{default:t(()=>[a(o,{title:"TypeScript",active:""},{default:t(()=>[A]),_:1}),a(o,{title:"JavaScript"},{default:t(()=>[W]),_:1})]),_:1}),P,n("div",L,[K,E,n("p",null,[O,a(p,{to:"/guide/deployment-types.html"},{default:t(()=>[U]),_:1}),R,a(p,{to:"/plugins/runner.html#sequential-processing-where-necessary"},{default:t(()=>[G]),_:1}),$])]),H,n("p",null,[J,V,Q,n("a",X,[Z,a(e)]),nn]),sn,n("p",null,[an,n("a",tn,[en,a(e)]),on]),cn,a(i,null,{default:t(()=>[a(o,{title:"TypeScript",active:""},{default:t(()=>[pn]),_:1}),a(o,{title:"JavaScript"},{default:t(()=>[ln]),_:1}),a(o,{title:"Deno"},{default:t(()=>[un]),_:1})]),_:1}),rn,dn,a(i,null,{default:t(()=>[a(o,{title:"TypeScript",active:""},{default:t(()=>[kn]),_:1}),a(o,{title:"JavaScript"},{default:t(()=>[mn]),_:1}),a(o,{title:"Deno"},{default:t(()=>[hn]),_:1})]),_:1}),bn,gn,n("ul",null,[n("li",null,[vn,n("a",yn,[_n,fn,wn,xn,Sn,jn,zn,Tn,Cn,qn,Dn,Yn,In,Bn,Fn,Mn,Nn,a(e)])]),n("li",null,[An,n("a",Wn,[Pn,Ln,Kn,En,On,Un,Rn,Gn,$n,Hn,Jn,Vn,Qn,Xn,Zn,ns,ss,a(e)])]),n("li",null,[as,n("a",ts,[es,os,cs,is,ps,ls,us,rs,ds,ks,ms,hs,bs,gs,vs,ys,_s,a(e)])]),n("li",null,[fs,n("a",ws,[xs,Ss,js,zs,Ts,Cs,qs,Ds,Ys,Is,Bs,Fs,Ms,Ns,As,Ws,Ps,a(e)])]),n("li",null,[Ls,n("a",Ks,[Es,Os,Us,Rs,Gs,$s,Hs,Js,Vs,Qs,Xs,Zs,na,sa,aa,ta,ea,a(e)])]),n("li",null,[oa,n("a",ca,[ia,pa,la,ua,ra,da,ka,ma,ha,ba,ga,va,ya,_a,fa,wa,xa,a(e)])]),n("li",null,[Sa,n("a",ja,[za,Ta,Ca,qa,Da,Ya,Ia,Ba,Fa,Ma,Na,Aa,Wa,Pa,La,Ka,Ea,a(e)])]),n("li",null,[Oa,n("a",Ua,[Ra,Ga,$a,Ha,Ja,Va,Qa,Xa,Za,nt,st,at,tt,et,ot,ct,it,a(e)])]),n("li",null,[pt,n("a",lt,[ut,rt,dt,kt,mt,ht,bt,gt,vt,yt,_t,ft,wt,xt,St,jt,zt,a(e)])]),n("li",null,[Tt,n("a",Ct,[qt,Dt,Yt,It,Bt,Ft,Mt,Nt,At,Wt,Pt,Lt,Kt,Et,Ot,Ut,Rt,a(e)])])]),n("div",Gt,[$t,n("p",null,[Ht,Jt,Vt,n("a",Qt,[Xt,a(e)]),Zt]),ne]),se,n("blockquote",null,[n("p",null,[ae,a(p,{to:"/plugins/runner.html"},{default:t(()=>[te]),_:1}),ee,oe,ce,ie,pe])]),le,a(i,null,{default:t(()=>[a(o,{title:"TypeScript",active:""},{default:t(()=>[ue]),_:1}),a(o,{title:"JavaScript"},{default:t(()=>[re]),_:1})]),_:1}),de])}const ge=u(k,[["render",ke],["__file","session.html.vue"]]);export{ge as default};
