import{_ as i,r as c,o as l,c as r,a as s,b as a,w as e,d as n,e as o}from"./app.34388d32.js";const u={},d=s("h1",{id:"bot-api-transformers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bot-api-transformers","aria-hidden":"true"},"#"),n(" Bot API Transformers")],-1),m=s("p",null,"Middleware is a function that handles a context object, i.e. incoming data.",-1),h=s("p",null,[n("grammY also provides you with the inverse. A "),s("em",null,"transformer function"),n(" is a function that handles outgoing data, i.e.")],-1),k=s("ul",null,[s("li",null,"a method name of the Bot API to call, and"),s("li",null,"a payload object that matches the method.")],-1),f=n("Instead of having "),v=s("code",null,"next",-1),b=n(" as the last argument to invoke downstream middleware, you receive "),_=s("code",null,"prev",-1),g=n(" as the first argument to utilize upstream transformer functions. Looking at the type signature of "),y=s("code",null,"Transformer",-1),w=n(" ("),x={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Transformer",target:"_blank",rel:"noopener noreferrer"},I=n("grammY API Reference"),A=n("), we can see how it reflects that. Note that "),P=s("code",null,[n("Payload<M"),s("wbr"),n(", R>")],-1),T=n(" refers to the payload object that has to match the given method, and that "),q=s("code",null,[n("Api"),s("wbr"),n("Response<Api"),s("wbr"),n("Call"),s("wbr"),n("Result<M"),s("wbr"),n(", R>>")],-1),j=n(" is the return type of the invoked method."),C=o(`<p>The last invoked transformer function is a built-in caller that does things like JSON serialization of certain fields, and eventually calling <code>fetch</code>.</p><p>There is no equivalent of a <code>Composer</code> class for transformer functions because that\u2019s probably overkill, but if you need it, you can write your own. PR welcome! \u{1F609}</p><h2 id="installing-a-transformer-function" tabindex="-1"><a class="header-anchor" href="#installing-a-transformer-function" aria-hidden="true">#</a> Installing a Transformer Function</h2><p>Transformer functions can be installed on <code>bot<wbr>.api</code>. Here is an example for a transformer function that does nothing:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Pass-through transformer function</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">prev</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Comparison with pass-through middleware</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is an example of a transformer function that prevents all API calls from happening:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Incorrectly return undefined instead of the respective object types.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also install transformer functions on the context object\u2019s API object. The transformer function will then only be used temporarily for the API requests that are performed on that specific context object. Calls to <code>bot<wbr>.api</code> are left unaffected. Calls via context objects of concurrently running middleware are left unaffected, as well. As soon as the respective middleware completes, the transformer function is discarded.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Install on all context objects that process messages.</span>
  ctx<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">prev</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The <code>signal</code> parameter should be always passed to <code>prev</code>. It allows canceling requests and is important for <code>bot<wbr>.stop</code> to work.</p></blockquote><p>Transformer functions installed on <code>bot<wbr>.api</code> will be pre-installed on every <code>ctx<wbr>.api</code> object. Thus, calls to <code>ctx<wbr>.api</code> will be transformed by both those transformers on <code>ctx<wbr>.api</code>, as well as those transformers installed on <code>bot<wbr>.api</code>.</p><h2 id="use-cases-of-transformer-functions" tabindex="-1"><a class="header-anchor" href="#use-cases-of-transformer-functions" aria-hidden="true">#</a> Use Cases of Transformer Functions</h2><p>Transformer functions are as flexible as middleware, and they have just as many different applications.</p>`,13),F=n("For instance, the "),M=n("grammY menu plugin"),N=n(" installs a transformer function to turn outgoing menu instances into the correct payload. You can also use them to"),R=n("implement "),Y=n("flood control"),B=n(","),S=s("li",null,"mock API requests during testing,",-1),L=n("add "),V=n("retry behavior"),E=n(", or"),H=s("li",null,"more.",-1),U=o('<p>Note, however, that retrying an API call can have odd side-effects: if you call <code>send<wbr>Document</code> and pass a readable stream instance to <code>Input<wbr>File</code>, then the stream will be read the first time the request is tried. If you invoke <code>prev</code> again, the stream may already be (partially) consumed, hence leading to broken files. It is therefore a more reliable way to pass file paths to <code>Input<wbr>File</code>, so grammY can recreate the stream as necessary.</p><h2 id="api-flavoring" tabindex="-1"><a class="header-anchor" href="#api-flavoring" aria-hidden="true">#</a> API Flavoring</h2>',2),z=n("grammY features "),D=n("context flavors"),J=o(" that can be used to adjust the context type. This includes API methods\u2014both those that are directly on the context object such as <code>ctx<wbr>.reply</code>, and all methods in <code>ctx<wbr>.api</code> and <code>ctx<wbr>.api<wbr>.raw</code>. However, you cannot adjust the types of <code>bot<wbr>.api</code> and <code>bot<wbr>.api<wbr>.raw</code> via context flavors.",11),O=o(`<p>This is why grammY supports <em>API flavors</em>. They solve this problem:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Api<span class="token punctuation">,</span> Bot<span class="token punctuation">,</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SomeApiFlavor<span class="token punctuation">,</span> SomeContextFlavor<span class="token punctuation">,</span> somePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;some-plugin&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Context flavoring</span>
<span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> Context <span class="token operator">&amp;</span> SomeContextFlavor<span class="token punctuation">;</span>
<span class="token comment">// API flavoring</span>
<span class="token keyword">type</span> <span class="token class-name">MyApi</span> <span class="token operator">=</span> Api <span class="token operator">&amp;</span> SomeApiFlavor<span class="token punctuation">;</span>

<span class="token comment">// Use both flavors.</span>
<span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot<span class="token operator">&lt;</span>MyContext<span class="token punctuation">,</span> MyApi<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;my-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use a plugin.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">somePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Now call \`bot.api\` with adjusted types from API flavor.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">somePluginMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Also, use adjusted context type from context flavor.</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">somePluginMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),G=n("API flavors work exactly analogously to context flavors. There are both additive and transformative API flavors, and multiple API flavors can be combined the same way as you would do with context flavors. If you are unsure how this works, head back to the "),K=n("section about context flavors"),Q=n(" in the guide.");function W(X,Z){const p=c("ExternalLinkIcon"),t=c("RouterLink");return l(),r("div",null,[d,m,h,k,s("p",null,[f,v,b,_,g,y,w,s("a",x,[I,a(p)]),A,P,T,q,j]),C,s("p",null,[F,a(t,{to:"/plugins/menu.html"},{default:e(()=>[M]),_:1}),N]),s("ul",null,[s("li",null,[R,a(t,{to:"/plugins/transformer-throttler.html"},{default:e(()=>[Y]),_:1}),B]),S,s("li",null,[L,a(t,{to:"/plugins/auto-retry.html"},{default:e(()=>[V]),_:1}),E]),H]),U,s("p",null,[z,a(t,{to:"/guide/context.html#context-flavors"},{default:e(()=>[D]),_:1}),J]),O,s("p",null,[G,a(t,{to:"/guide/context.html#context-flavors"},{default:e(()=>[K]),_:1}),Q])])}const nn=i(u,[["render",W],["__file","transformers.html.vue"]]);export{nn as default};
